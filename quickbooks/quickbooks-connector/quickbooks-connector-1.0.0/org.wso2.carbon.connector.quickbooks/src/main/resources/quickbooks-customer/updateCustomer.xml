<template name="updateCustomer" xmlns="http://ws.apache.org/ns/synapse">
    <!-- optional parameters -->
    <parameter name="id" description="The customer ID."/>
    <parameter name="syncToken" description="Version number of the entity."/>
    <parameter name="isSparse" description="Boolean value to specify weather the update is a full or sparse update."/>
    <parameter name="title" description="Title of the person."/>
    <parameter name="givenName" description="Given name or first name of a person."/>
    <parameter name="middleName" description="Middle name of the person."/>
    <parameter name="familyName" description="Family name or the last name of the person."/>
    <parameter name="suffix" description="Suffix of the name."/>
    <parameter name="fullyQualifiedName" description="Fully qualified name of the entity."/>
    <parameter name="companyName" description="The name of the company associated with the person or organization."/>
    <parameter name="displayName" description="The name of the person or organization as displayed."/>
    <parameter name="printOnCheckName" description="Name of the person or organization as printed on a check."/>
    <parameter name="active" description="If true, this entity is currently enabled for use by QuickBooks."/>
    <parameter name="primaryPhone" description="Primary phone number."/>
    <parameter name="alternatePhone" description="Alternate phone number."/>
    <parameter name="mobile" description="Mobile phone number."/>
    <parameter name="fax" description="Fax number."/>
    <parameter name="primaryEmailAddr" description="Primary email address."/>
    <parameter name="webAddr" description="Website address."/>
    <parameter name="defaultTaxCodeRef" description="The default tax code to apply to transactions."/>
    <parameter name="taxable" description="If true, transactions for this customer are taxable."/>
    <parameter name="billAddr" description="Default billing address."/>
    <parameter name="shipAddr" description="Default shipping address."/>
    <parameter name="notes" description="Free form text describing the Customer."/>
    <parameter name="job" description="If true, this is a Job or sub-customer. If false or null, this is a top level customer, not a Job or sub-customer."/>
    <parameter name="billWithParent" description="If true, this Customer is billed with its parent. If false, or null the customer is not to be billed with its parent."/>
    <parameter name="parentRef" description="The immediate parent of the Sub-Customer/Job in the hierarchical 'Customer:Job' list."/>
    <parameter name="level" description="Specifies the level of the hierarchy in which the entity is located."/>
    <parameter name="salesTermRef" description="Reference to a SalesTerm associated with the Customer."/>
    <parameter name="paymentMethodRef" description="Reference to a PaymentMethod associated with the Customer."/>
    <parameter name="balance" description="Specifies the open balance amount or the amount unpaid by the customer."/>
    <parameter name="openBalanceDate" description="Date of the Open Balance for the create operation."/>
    <parameter name="balanceWithJobs" description="Cumulative open balance amount for the Customer (or Job) and all its sub-jobs."/>
    <parameter name="currencyRef" description="Reference to the Currency in which all amounts on the associated transaction are expressed."/>
    <parameter name="preferredDeliveryMethod" description="Preferred delivery method."/>
    <parameter name="resaleNum" description="Resale number or some additional info about the customer."/>

    <sequence>
        <property name="uri.var.id" expression="$func:id"/>
        <property name="uri.var.isSparse" expression="$func:isSparse"/>
        <property name="uri.var.syncToken" expression="$func:syncToken"/>
        <property name="uri.var.title" expression="$func:title"/>
        <property name="uri.var.givenName" expression="$func:givenName"/>
        <property name="uri.var.middleName" expression="$func:middleName"/>
        <property name="uri.var.familyName" expression="$func:familyName"/>
        <property name="uri.var.suffix" expression="$func:suffix"/>
        <property name="uri.var.fullyQualifiedName" expression="$func:fullyQualifiedName"/>
        <property name="uri.var.companyName" expression="$func:companyName"/>
        <property name="uri.var.displayName" expression="$func:displayName"/>
        <property name="uri.var.printOnCheckName" expression="$func:printOnCheckName"/>
        <property name="uri.var.active" expression="$func:active"/>
        <property name="uri.var.primaryPhone" expression="$func:primaryPhone"/>
        <property name="uri.var.alternatePhone" expression="$func:alternatePhone"/>
        <property name="uri.var.mobile" expression="$func:mobile"/>
        <property name="uri.var.fax" expression="$func:fax"/>
        <property name="uri.var.primaryEmailAddr" expression="$func:primaryEmailAddr"/>
        <property name="uri.var.webAddr" expression="$func:webAddr"/>
        <property name="uri.var.defaultTaxCodeRef" expression="$func:defaultTaxCodeRef"/>
        <property name="uri.var.taxable" expression="$func:taxable"/>
        <property name="uri.var.billAddr" expression="$func:billAddr"/>
        <property name="uri.var.shipAddr" expression="$func:shipAddr"/>
        <property name="uri.var.notes" expression="$func:notes"/>
        <property name="uri.var.job" expression="$func:job"/>
        <property name="uri.var.billWithParent" expression="$func:billWithParent"/>
        <property name="uri.var.parentRef" expression="$func:parentRef"/>
        <property name="uri.var.level" expression="$func:level"/>
        <property name="uri.var.salesTermRef" expression="$func:salesTermRef"/>
        <property name="uri.var.paymentMethodRef" expression="$func:paymentMethodRef"/>
        <property name="uri.var.balance" expression="$func:balance"/>
        <property name="uri.var.openBalanceDate" expression="$func:openBalanceDate"/>
        <property name="uri.var.balanceWithJobs" expression="$func:balanceWithJobs"/>
        <property name="uri.var.currencyRef" expression="$func:currencyRef"/>
        <property name="uri.var.preferredDeliveryMethod" expression="$func:preferredDeliveryMethod"/>
        <property name="uri.var.resaleNum" expression="$func:resaleNum"/>
        <property name="uri.var.uriRemainder" expression="fn:concat('/company/',get-property('uri.var.companyId'),'/customer?operation=update')" />
        <property name="uri.var.params" value="" />
        <property name="uri.var.method" value="POST" />

        <!-- Authentication Header Setup and call the API -->
        <class
                name="org.wso2.carbon.connector.quickbooks.auth.QuickBooksOAuthSignpost" />

        <filter source="boolean(get-property('auth'))" regex="true">
            <then>
                <property name="Authorization" expression="get-property('auth')"
                          scope="transport" type="STRING" />
            </then>
        </filter>
        <!-- Building payload for mandatory params -->
        <payloadFactory media-type="json">
            <format>
                {
                "Id": "$1",
                "SyncToken": "$2"
                }
            </format>
            <args>
                <arg expression="get-property('uri.var.id')" />
                <arg expression="get-property('uri.var.syncToken')" />
            </args>
        </payloadFactory>


        <script language="js">
            <![CDATA[
				//request body param variables
				var payload = mc.getPayloadJSON();
				
				var title = mc.getProperty('uri.var.title');
				var isSparse = mc.getProperty('uri.var.isSparse');
				var givenName = mc.getProperty('uri.var.givenName');
				var middleName = mc.getProperty('uri.var.middleName');
				var familyName = mc.getProperty('uri.var.familyName');
				var suffix = mc.getProperty('uri.var.suffix');
				var fullyQualifiedName = mc.getProperty('uri.var.fullyQualifiedName');
				var companyName = mc.getProperty('uri.var.companyName');
				var displayName = mc.getProperty('uri.var.displayName');
				var printOnCheckName = mc.getProperty('uri.var.printOnCheckName');
				var active = mc.getProperty('uri.var.active');
				var primaryPhone = mc.getProperty('uri.var.primaryPhone');
				var alternatePhone = mc.getProperty('uri.var.alternatePhone');
				var mobile = mc.getProperty('uri.var.mobile');
				var fax = mc.getProperty('uri.var.fax');
				var primaryEmailAddr = mc.getProperty('uri.var.primaryEmailAddr');
				var webAddr = mc.getProperty('uri.var.webAddr');
				var defaultTaxCodeRef = mc.getProperty('uri.var.defaultTaxCodeRef');
				var taxable = mc.getProperty('uri.var.taxable');
				var billAddr = mc.getProperty('uri.var.billAddr');
				var shipAddr = mc.getProperty('uri.var.shipAddr');
				var notes = mc.getProperty('uri.var.notes');
				var job = mc.getProperty('uri.var.job');
				var billWithParent = mc.getProperty('uri.var.billWithParent');
				var parentRef = mc.getProperty('uri.var.parentRef');
				var level = mc.getProperty('uri.var.level');
				var salesTermRef = mc.getProperty('uri.var.salesTermRef');
				var paymentMethodRef = mc.getProperty('uri.var.paymentMethodRef');
				var balance = mc.getProperty('uri.var.balance');
				var openBalanceDate = mc.getProperty('uri.var.openBalanceDate');
				var balanceWithJobs = mc.getProperty('uri.var.balanceWithJobs');
				var currencyRef = mc.getProperty('uri.var.currencyRef');
				var preferredDeliveryMethod = mc.getProperty('uri.var.preferredDeliveryMethod');
				var resaleNum = mc.getProperty('uri.var.resaleNum');
								
				
				if (title != null && title != "") {
					payload.Title = title;
				}
				
				if (givenName != null && givenName != "") {
					payload.GivenName = givenName;
				}
				
				if (middleName != null && middleName != "") {
					payload.MiddleName = middleName;
				}
				
				if (familyName != null && familyName != "") {
					payload.FamilyName = familyName;
				}
				
				if (suffix != null && suffix != "") {
					payload.Suffix = suffix;
				}
				
				if (fullyQualifiedName != null && fullyQualifiedName != "") {
					payload.FullyQualifiedName = fullyQualifiedName;
				}
				
				if (companyName != null && companyName != "") {
					payload.CompanyName = companyName;
				}
				
				if (displayName != null && displayName != "") {
					payload.DisplayName = displayName;
				}
				
				if (printOnCheckName != null && printOnCheckName != "") {
					payload.PrintOnCheckName = printOnCheckName;
				}
				
				if (isSparse != null && isSparse != "") {
					payload.sparse = isSparse;
				}
				
				if (active != null && active != "") {
					payload.Active = active;
				}
				
				if (primaryPhone != null && primaryPhone != "") {
					payload.PrimaryPhone = eval("("+ primaryPhone +")");
				}
				
				if (alternatePhone != null && alternatePhone != "") {
					payload.AlternatePhone = eval("("+ alternatePhone +")");
				}
				
				if (mobile != null && mobile != "") {
					payload.Mobile = eval("("+ mobile +")");
				}
				
				if (fax != null && fax != "") {
					payload.Fax = eval("("+ fax +")");
				}
				
				if (primaryEmailAddr != null && primaryEmailAddr != "") {
					payload.PrimaryEmailAddr = eval("("+ primaryEmailAddr +")");
				}
				
				if (webAddr != null && webAddr != "") {
					payload.WebAddr = eval("("+ webAddr +")");
				}
				
				if (defaultTaxCodeRef != null && defaultTaxCodeRef != "") {
					payload.DefaultTaxCodeRef = eval("("+ defaultTaxCodeRef +")");
				}				
				
				if (taxable != null && taxable != "") {
					payload.Taxable = taxable;
				}
				
				if (billAddr != null && billAddr != "") {
					payload.BillAddr = eval("("+ billAddr +")");
				}
				
				if (shipAddr != null && shipAddr != "") {
					payload.ShipAddr = eval("("+ shipAddr +")");
				}
				
				if (notes != null && notes != "") {
					payload.Notes = notes;
				}
				
				if (job != null && job != "") {
					payload.Job = job;
				}
				
				if (billWithParent != null && billWithParent != "") {
					payload.BillWithParent = billWithParent;
				}
				
				if (parentRef != null && parentRef != "") {
					payload.ParentRef = eval("("+ parentRef +")");
				}				

				if (level != null && level != "") {
					payload.Level = level;
				}
				
				if (salesTermRef != null && salesTermRef != "") {
					payload.SalesTermRef = eval("("+ salesTermRef +")");
				}	
				
				if (paymentMethodRef != null && paymentMethodRef != "") {
					payload.PaymentMethodRef = eval("("+ paymentMethodRef +")");
				}				
				
				if (balance != null && balance != "") {
					payload.Balance = balance;
				}
				
				if (openBalanceDate != null && openBalanceDate != "") {
					payload.OpenBalanceDate = openBalanceDate;
				}
				
				if (balanceWithJobs != null && balanceWithJobs != "") {
					payload.BalanceWithJobs = balanceWithJobs;
				}
				
				if (currencyRef != null && currencyRef != "") {
					payload.CurrencyRef = eval("("+ currencyRef +")");
				}
				
				if (preferredDeliveryMethod != null && preferredDeliveryMethod != "") {
					payload.PreferredDeliveryMethod = preferredDeliveryMethod;
				}
				
				if (resaleNum != null && resaleNum != "") {
					payload.ResaleNum = resaleNum;
				}
																
				mc.setPayloadJSON(payload);
			]]>

        </script>

        <call>
            <endpoint>
                <http method="post" uri-template="legacy-encoding:{uri.var.apiUrl}{uri.var.uriRemainder}" />
            </endpoint>
        </call>

        <!-- Remove response custom header information -->
        <header name="intuit_tid" scope="transport" action="remove" />
        <header name="QBO-Version" scope="transport" action="remove" />
        <header name="Vary" scope="transport" action="remove" />
        <header name="Via" scope="transport" action="remove" />

    </sequence>
</template>