<template name="updatePurchaseOrder" xmlns="http://ws.apache.org/ns/synapse">
	<!-- required parameters -->
	<parameter name="id" description="Unique Identifier for an Intuit entity (object)." />
	<parameter name="syncToken" description="Version number of the entity." />
	<parameter name="line" description="A line item of a transaction." />
	<parameter name="vendorRef" description="Specifies the vendor reference for this transaction." />

	<!-- optional parameters -->
	<parameter name="domain" description="The domain of the update transaction." />
	<parameter name="isSparse" description="Boolean value to specify weather the update is a full or a sparse update." />
	<parameter name="customField" description="Custom field or data extension." />
	<parameter name="attachableRef" description="Specifies entity name of the attachment from where the attachment was requested." />
	<parameter name="docNumber" description="Reference number for the transaction." />
	<parameter name="txnDate" description="The date entered by the user when this transaction occurred." />
	<parameter name="privateNote" description="User entered, organization-private note about the transaction." />
	<parameter name="linkedTxn" description="A linked (related) transaction." />
	<parameter name="aPAccountRef" description="Specifies which AP account to which the bill is credited." />
	<parameter name="totalAmt" description="The total amount due, determined by taking the sum of all lines associated." />
	<parameter name="classRef" description="Reference type of all IDs that are taken as input or output." />
	<parameter name="salesTermRef" description="Reference type of all IDs that are taken as input or output." />
	<parameter name="dueDate"
		description="The nominal date by which the bill must be paid, not including any early-payment discount incentives, or late payment penalties." />
	<parameter name="vendorAddr" description="Address to which the payment should be sent." />
	<parameter name="shipAddr" description="Address to which the vendor shipped or will ship any goods associated with the purchase." />
	<parameter name="shipMethodRef" description="Reference type of all IDs that are taken as input or output." />
	<parameter name="purchaseOrderStatus" description="Enumeration of status for purchase order." />
	<parameter name="txnTaxDetail" description="Details of taxes charged on the transaction as a whole." />
	<parameter name="taxCodeRef" description="Represents the TaxCode Reference with respect to the purchase." />
	<parameter name="currencyRef" description="Reference to the Currency in which all amounts on the associated transaction are expressed." />
	<parameter name="exchangeRate" description="Currency exchange rate." />
	<parameter name="globalTaxCalculation" description="Method in which tax is applied." />

	<sequence>
		<property name="uri.var.id" expression="$func:id" />
		<property name="uri.var.syncToken" expression="$func:syncToken" />
		<property name="uri.var.domain" expression="$func:domain" />
		<property name="uri.var.isSparse" expression="$func:isSparse" />
		<property name="uri.var.customField" expression="$func:customField" />
		<property name="uri.var.attachableRef" expression="$func:attachableRef" />
		<property name="uri.var.docNumber" expression="$func:docNumber" />
		<property name="uri.var.txnDate" expression="$func:txnDate" />
		<property name="uri.var.privateNote" expression="$func:privateNote" />
		<property name="uri.var.linkedTxn" expression="$func:linkedTxn" />
		<property name="uri.var.line" expression="$func:line" />
		<property name="uri.var.vendorRef" expression="$func:vendorRef" />
		<property name="uri.var.aPAccountRef" expression="$func:aPAccountRef" />
		<property name="uri.var.totalAmt" expression="$func:totalAmt" />
		<property name="uri.var.classRef" expression="$func:classRef" />
		<property name="uri.var.salesTermRef" expression="$func:salesTermRef" />
		<property name="uri.var.dueDate" expression="$func:dueDate" />
		<property name="uri.var.vendorAddr" expression="$func:vendorAddr" />
		<property name="uri.var.shipAddr" expression="$func:shipAddr" />
		<property name="uri.var.shipMethodRef" expression="$func:shipMethodRef" />
		<property name="uri.var.purchaseOrderStatus" expression="$func:purchaseOrderStatus" />
		<property name="uri.var.txnTaxDetail" expression="$func:txnTaxDetail" />
		<property name="uri.var.taxCodeRef" expression="$func:taxCodeRef" />
		<property name="uri.var.currencyRef" expression="$func:currencyRef" />
		<property name="uri.var.exchangeRate" expression="$func:exchangeRate" />
		<property name="uri.var.globalTaxCalculation" expression="$func:globalTaxCalculation" />
		<property name="uri.var.uriRemainder" expression="fn:concat('/company/',get-property('uri.var.companyId'),'/purchaseorder?operation=update')" />
		<property name="uri.var.params" value="" />
		<property name="uri.var.method" value="POST" />

		<!-- Authentication Header Setup and call the API -->
		<class name="org.wso2.carbon.connector.quickbooks.auth.QuickBooksOAuthSignpost" />

		<filter source="boolean(get-property('auth'))" regex="true">
			<then>
				<property name="Authorization" expression="get-property('auth')" scope="transport" type="STRING" />
			</then>
		</filter>

		<payloadFactory media-type="json">
			<format>
				{
				"Id": "$1",
				"SyncToken": "$2",
				"Line": $3,
				"VendorRef": $4
				}
			</format>
			<args>
				<arg expression="get-property('uri.var.id')" />
				<arg expression="get-property('uri.var.syncToken')" />
				<arg expression="get-property('uri.var.line')" />
				<arg expression="get-property('uri.var.vendorRef')" />
			</args>
		</payloadFactory>

		<script language="js">
	        <![CDATA[
	        
	              //request body param variables
	              var payload = mc.getPayloadJSON();
	              
	              var customField = mc.getProperty('uri.var.customField');
	              var attachableRef = mc.getProperty('uri.var.attachableRef');
	              var docNumber = mc.getProperty('uri.var.docNumber');
	              var txnDate = mc.getProperty('uri.var.txnDate');
	              var privateNote = mc.getProperty('uri.var.privateNote');
	              var linkedTxn = mc.getProperty('uri.var.linkedTxn');  
	              var aPAccountRef = mc.getProperty('uri.var.aPAccountRef');   
	              var totalAmt = mc.getProperty('uri.var.totalAmt');  
	              var classRef = mc.getProperty('uri.var.classRef');  
	              var salesTermRef = mc.getProperty('uri.var.salesTermRef');  
	              var dueDate = mc.getProperty('uri.var.dueDate'); 
	              var vendorAddr = mc.getProperty('uri.var.vendorAddr'); 
	              var shipAddr = mc.getProperty('uri.var.shipAddr'); 
	              var shipMethodRef = mc.getProperty('uri.var.shipMethodRef'); 
	              var purchaseOrderStatus = mc.getProperty('uri.var.purchaseOrderStatus'); 
	              var txnTaxDetail = mc.getProperty('uri.var.txnTaxDetail'); 
	              var taxCodeRef = mc.getProperty('uri.var.taxCodeRef'); 
	              var currencyRef = mc.getProperty('uri.var.currencyRef'); 
	              var exchangeRate = mc.getProperty('uri.var.exchangeRate'); 
	              var globalTaxCalculation = mc.getProperty('uri.var.globalTaxCalculation'); 
	              var domain = mc.getProperty('uri.var.domain');
	         	  var isSparse = mc.getProperty('uri.var.isSparse');
	              
	              if (customField != null && customField != "") {
	                     payload.CustomField = eval("("+customField+")"); 	
	              }  
	              
	              if (attachableRef != null && attachableRef != "") {
	                     payload.AttachableRef = eval("("+attachableRef+")"); 	
	              }                         
	              
	              if (docNumber != null && docNumber != "") {
	                     payload.DocNumber = docNumber;	
	              }                           
	              
	              if (txnDate != null && txnDate != "") {
	                     payload.TxnDate = txnDate;	
	              }                             
	                                        
	              if (privateNote != null && privateNote != "") {
	                     payload.PrivateNote = privateNote;	
	              }                          
	              
	              if (linkedTxn != null && linkedTxn != "") {
	                     payload.LinkedTxn = eval("("+linkedTxn+")"); 	
	              } 
	
	              if (aPAccountRef != null && aPAccountRef != "") {
	                     payload.APAccountRef = eval("("+aPAccountRef+")"); 	
	              }   
	              
	              if (totalAmt != null && totalAmt != "") {
	                     payload.TotalAmt = totalAmt;	
	              }   
	              
	              if (classRef != null && classRef != "") {
	                     payload.ClassRef = eval("("+classRef+")"); 	
	              }  
	              
	              if (salesTermRef != null && salesTermRef != "") {
	                     payload.SalesTermRef = eval("("+salesTermRef+")"); 	
	              } 
	                                                                  
	              if (dueDate != null && dueDate != "") {
	                     payload.DueDate = dueDate;	
	              }     
	              
	              if (vendorAddr != null && vendorAddr != "") {
	                     payload.VendorAddr = eval("("+vendorAddr+")"); 	
	              }                            
	                 
	              if (shipAddr != null && shipAddr != "") {
	                     payload.ShipAddr = eval("("+shipAddr+")"); 	
	              }   
	              
	              if (shipMethodRef != null && shipMethodRef != "") {
	                     payload.ShipMethodRef = eval("("+shipMethodRef+")"); 	
	              }  
	              
	              if (purchaseOrderStatus != null && purchaseOrderStatus != "") {
	                     payload.POStatus = purchaseOrderStatus;	
	              }                             
	              
	              if (txnTaxDetail != null && txnTaxDetail != "") {
	                     payload.TxnTaxDetail = eval("("+txnTaxDetail+")"); 	
	              }
	                                        
	              if (taxCodeRef != null && taxCodeRef != "") {
	                     payload.TaxCodeRef = eval("("+taxCodeRef+")"); 	
	              }  
	              
	              if (currencyRef != null && currencyRef != "") {
	                     payload.CurrencyRef = eval("("+currencyRef+")"); 	
	              }                                                                                                                                                                                                      
	                
	              if (exchangeRate != null && exchangeRate != "") {
	                     payload.ExchangeRate = exchangeRate;	
	              }    
	              
	              if (globalTaxCalculation != null && globalTaxCalculation != "") {
	                     payload.GlobalTaxCalculation = globalTaxCalculation;	
	              } 
	                  
	              if (domain != null && domain != "") {
	                     payload.domain = domain;
		          }    
		                                                                                             
		          if (isSparse != null && isSparse != "") {
		                 payload.sparse = isSparse;
		          }                                                                      
	                                
	              mc.setPayloadJSON(payload); 
	        ]]>

		</script>

		<call>
			<endpoint>
				<http method="post" uri-template="legacy-encoding:{uri.var.apiUrl}{uri.var.uriRemainder}" />
			</endpoint>
		</call>

		<!-- Remove response custom header information -->
		<header name="intuit_tid" scope="transport" action="remove" />
		<header name="QBO-Version" scope="transport" action="remove" />
		<header name="Vary" scope="transport" action="remove" />
		<header name="Via" scope="transport" action="remove" />

	</sequence>
</template>