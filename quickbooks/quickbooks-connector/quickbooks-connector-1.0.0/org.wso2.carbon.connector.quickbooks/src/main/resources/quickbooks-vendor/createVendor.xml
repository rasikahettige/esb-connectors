<template name="createVendor" xmlns="http://ws.apache.org/ns/synapse">

	<!-- optional parameters -->
	<parameter name="title" description="Title of the person." />
	<parameter name="givenName" description="Given name or first name of a person." />
	<parameter name="middleName" description="Middle name of the person." />
	<parameter name="familyName" description="Family name or the last name of the person." />
	<parameter name="suffix" description="Suffix of the name." />
	<parameter name="companyName" description="The name of the company associated with the person or organization." />
	<parameter name="displayName" description="The name of the person or organization as displayed." />
	<parameter name="printOnCheckName" description="Name of the person or organization as printed on a check." />
	<parameter name="active" description="If true, this entity is currently enabled for use by QuickBooks." />
	<parameter name="primaryPhone" description="Primary phone number." />
	<parameter name="alternatePhone" description="Alternate phone number." />
	<parameter name="mobile" description="Mobile phone number." />
	<parameter name="fax" description="Fax number." />
	<parameter name="primaryEmailAddr" description="Primary email address." />
	<parameter name="webAddr" description="Website address." />
	<parameter name="billAddr" description="Billing address of the vendor." />
	<parameter name="otherContactInfo" description="List of ContactInfo entities of any contact info type. " />
	<parameter name="taxIdentifier" description="Tax ID of the Person or Organization." />
	<parameter name="termRef" description="Reference to a terms associated with the vendor." />
	<parameter name="balance" description="Specifies the amount the company owes to this vendor." />
	<parameter name="accountNumber" description="Name or number of the account associated with this vendor." />
	<parameter name="isVendor1099" description="Whether the vendor belong to 1099-MISC contract or not. " />
	<parameter name="currencyRef" description="Reference to the currency in which all the business transactions created for or received from that vendor are created." />

	<sequence>
		<property name="uri.var.title" expression="$func:title" />
		<property name="uri.var.givenName" expression="$func:givenName" />
		<property name="uri.var.middleName" expression="$func:middleName" />
		<property name="uri.var.familyName" expression="$func:familyName" />
		<property name="uri.var.suffix" expression="$func:suffix" />
		<property name="uri.var.companyName" expression="$func:companyName" />
		<property name="uri.var.displayName" expression="$func:displayName" />
		<property name="uri.var.printOnCheckName" expression="$func:printOnCheckName" />
		<property name="uri.var.active" expression="$func:active" />
		<property name="uri.var.primaryPhone" expression="$func:primaryPhone" />
		<property name="uri.var.alternatePhone" expression="$func:alternatePhone" />
		<property name="uri.var.mobile" expression="$func:mobile" />
		<property name="uri.var.fax" expression="$func:fax" />
		<property name="uri.var.primaryEmailAddr" expression="$func:primaryEmailAddr" />
		<property name="uri.var.webAddr" expression="$func:webAddr" />
		<property name="uri.var.billAddr" expression="$func:billAddr" />
		<property name="uri.var.otherContactInfo" expression="$func:otherContactInfo" />
		<property name="uri.var.taxIdentifier" expression="$func:taxIdentifier" />
		<property name="uri.var.termRef" expression="$func:termRef" />
		<property name="uri.var.balance" expression="$func:balance" />
		<property name="uri.var.accountNumber" expression="$func:accountNumber" />
		<property name="uri.var.isVendor1099" expression="$func:isVendor1099" />
		<property name="uri.var.currencyRef" expression="$func:currencyRef" />
		<property name="uri.var.uriRemainder" expression="fn:concat('/company/',get-property('uri.var.companyId'),'/vendor')" />
		<property name="uri.var.params" value="" />
		<property name="uri.var.method" value="POST" />

		<!-- Authentication Header Setup and call the API -->
		<class
			name="org.wso2.carbon.connector.quickbooks.auth.QuickBooksOAuthSignpost" />

		<filter source="boolean(get-property('auth'))" regex="true">
			<then>
				<property name="Authorization" expression="get-property('auth')"
					scope="transport" type="STRING" />
			</then>
		</filter>

		<payloadFactory media-type="json">
			<format>
				{
				
				}

			</format>
		</payloadFactory>

		<script language="js">
                     <![CDATA[
                     
                           //request body param variables
                           var payload = mc.getPayloadJSON();
                           
                           var title = mc.getProperty('uri.var.title');
                           var givenName = mc.getProperty('uri.var.givenName');
						   var middleName = mc.getProperty('uri.var.middleName');
                           var familyName = mc.getProperty('uri.var.familyName');
                           var suffix = mc.getProperty('uri.var.suffix');
                           var companyName = mc.getProperty('uri.var.companyName');
                           var displayName = mc.getProperty('uri.var.displayName');
                           var printOnCheckName = mc.getProperty('uri.var.printOnCheckName');
                           var active = mc.getProperty('uri.var.active');
                           var primaryPhone = mc.getProperty('uri.var.primaryPhone');
                           var alternatePhone = mc.getProperty('uri.var.alternatePhone');
                           var mobile = mc.getProperty('uri.var.mobile');
                           var fax = mc.getProperty('uri.var.fax');
                           var primaryEmailAddr = mc.getProperty('uri.var.primaryEmailAddr');
                           var webAddr = mc.getProperty('uri.var.webAddr');
                           var billAddr = mc.getProperty('uri.var.billAddr');
                           var otherContactInfo = mc.getProperty('uri.var.otherContactInfo');
                           var taxIdentifier = mc.getProperty('uri.var.taxIdentifier');
                           var termRef = mc.getProperty('uri.var.termRef');
                           var balance = mc.getProperty('uri.var.balance');
                           var accountNumber = mc.getProperty('uri.var.accountNumber');
                           var isVendor1099 = mc.getProperty('uri.var.isVendor1099');
                           var currencyRef = mc.getProperty('uri.var.currencyRef');
                                                 
                           if (title != null && title != "") {
                                  payload.Title = title;
                           }
                           
                           if (givenName != null && givenName != "") {
                                  payload.GivenName = givenName;
                           }                          
                           
                           if (middleName != null && middleName != "") {
                                  payload.MiddleName = middleName;
                           }                            
                           
                           if (familyName != null && familyName != "") {
                                  payload.FamilyName = familyName;
                           }                             
                           
                           if (suffix != null && suffix != "") {
                                  payload.Suffix = suffix;
                           }                               
                           
                           if (companyName != null && companyName != "") {
                                  payload.CompanyName= companyName;
                           }                             
                           
                           if (displayName != null && displayName != "") {
                                  payload.DisplayName= displayName;
                           }                               
                           
                           if (printOnCheckName != null && printOnCheckName != "") {
                                  payload.PrintOnCheckName= printOnCheckName;
                           }                           
                           
                           if (active != null && active != "") {
                                  payload.Active= active;
                           }                            
                           
                           if (primaryPhone != null && primaryPhone != "") {
                                  payload.PrimaryPhone = eval("("+primaryPhone+")"); 	
                           }                             
                           
                           if (alternatePhone != null && alternatePhone != "") {
                                  payload.AlternatePhone = eval("("+alternatePhone+")"); 
                           }                         
                         
                           if (mobile != null && mobile != "") {
                                  payload.Mobile = eval("("+mobile+")"); 
                           }                          
                         
                           if (fax != null && fax != "") {
                                  payload.Fax = eval("("+fax+")"); 
                           }                             
                         
                           if (primaryEmailAddr != null && primaryEmailAddr != "") {
                                  payload.PrimaryEmailAddr = eval("("+primaryEmailAddr+")"); 
                           }                          
                         
                           if (webAddr != null && webAddr != "") {
                                  payload.WebAddr = eval("("+webAddr+")"); 
                           }                          
                         
                           if (billAddr != null && billAddr != "") {
                                  payload.BillAddr = eval("("+billAddr+")"); 
                           }                          
                         
                           if (otherContactInfo != null && otherContactInfo != "") {
                                  payload.OtherContactInfo = eval("("+otherContactInfo+")"); 
                           }                                                                                                       
                         
                           if (taxIdentifier != null && taxIdentifier != "") {
                                  payload.TaxIdentifier= taxIdentifier;
                           }        
                                           
                           if (termRef != null && termRef != "") {
                                  payload.TermRef = eval("("+termRef+")"); 
                           }      
                                                 
                           if (balance != null && balance != "") {
                                  payload.Balance= balance;
                           }                           
                         
                           if (accountNumber != null && accountNumber != "") {
                                  payload.AcctNum= accountNumber;
                           }                           
                         
                           if (isVendor1099 != null && isVendor1099 != "") {
                                  payload.Vendor1099= isVendor1099;
                           }  
                           
                           if (currencyRef != null && currencyRef != "") {
                                  payload.CurrencyRef = eval("("+currencyRef+")"); 
                           }                                                      
                                             
                           mc.setPayloadJSON(payload); 
                     ]]>

		</script>

		<call>
			<endpoint>
				<http method="post" uri-template="legacy-encoding:{uri.var.apiUrl}{uri.var.uriRemainder}" />
			</endpoint>
		</call>
		
		<!-- Remove response custom header information -->
		<header name="intuit_tid" scope="transport" action="remove" />
		<header name="QBO-Version" scope="transport" action="remove" />
		<header name="Vary" scope="transport" action="remove" />
		<header name="Via" scope="transport" action="remove" />		

	</sequence>
</template>