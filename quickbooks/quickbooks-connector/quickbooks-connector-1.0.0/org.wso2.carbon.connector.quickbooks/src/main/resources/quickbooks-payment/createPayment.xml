<template name="createPayment" xmlns="http://ws.apache.org/ns/synapse">

	<!-- required parameters -->
	<parameter name="customerRef" description="Represents Customer or Job reference." />
	<parameter name="totalAmt" description="Includes the total of all the payments from the Payment Details." />

	<!-- optional parameters -->
	<parameter name="txnDate" description="The date entered by the user when this transaction occurred." />
	<parameter name="privateNote" description="User entered, organization-private note about the transaction." />
	<parameter name="txnStatus" description="The status of the transaction.Default is 'PAID'" />
	<parameter name="line" description="A line item of a transaction.Line Header goes here." />
	<parameter name="aRAccountRef" description="Reference to the ARAccount (accounts receivable account) associated with the transaction." />
	<parameter name="depositToAccountRef" description="Optional asset account specification to designate the account the payment money needs to be deposited to." />
	<parameter name="paymentMethodRef" description="Reference Id to the PaymentMethod." />
	<parameter name="paymentRefNum" description="The reference number for the payment received." />
	<parameter name="creditCardPayment" description="Information about a payment received by credit card." />
	<parameter name="processPayment" description="Indicates that the payment should be processed by merchant account service." />
	<parameter name="currencyRef" description="Reference to the Currency in which all amounts on the associated transaction are expressed." />
	<parameter name="exchangeRate" description="Currency exchange rate." />

	<sequence>
		<property name="uri.var.customerRef" expression="$func:customerRef" />
		<property name="uri.var.totalAmt" expression="$func:totalAmt" />
		<property name="uri.var.txnDate" expression="$func:txnDate" />
		<property name="uri.var.privateNote" expression="$func:privateNote" />
		<property name="uri.var.txnStatus" expression="$func:txnStatus" />
		<property name="uri.var.line" expression="$func:line" />
		<property name="uri.var.aRAccountRef" expression="$func:aRAccountRef" />
		<property name="uri.var.depositToAccountRef" expression="$func:depositToAccountRef" />
		<property name="uri.var.paymentMethodRef" expression="$func:paymentMethodRef" />
		<property name="uri.var.paymentRefNum" expression="$func:paymentRefNum" />
		<property name="uri.var.creditCardPayment" expression="$func:creditCardPayment" />
		<property name="uri.var.processPayment" expression="$func:processPayment" />
		<property name="uri.var.currencyRef" expression="$func:currencyRef" />
		<property name="uri.var.exchangeRate" expression="$func:exchangeRate" />
		<property name="uri.var.uriRemainder" expression="fn:concat('/company/',get-property('uri.var.companyId'),'/payment')" />
		<property name="uri.var.params" value="" />
		<property name="uri.var.method" value="POST" />

		<!-- Authentication Header Setup and call the API -->
		<class
			name="org.wso2.carbon.connector.quickbooks.auth.QuickBooksOAuthSignpost" />

		<filter source="boolean(get-property('auth'))" regex="true">
			<then>
				<property name="Authorization" expression="get-property('auth')"
					scope="transport" type="STRING" />
			</then>
		</filter>

		<payloadFactory media-type="json">
			<format>
				{
				"CustomerRef": $1,
				"TotalAmt": "$2"
				}

			</format>
			<args>
				<arg expression="get-property('uri.var.customerRef')" />
				<arg expression="get-property('uri.var.totalAmt')" />
			</args>
		</payloadFactory>

		<script language="js">
                     <![CDATA[
                     
                           //request body param variables
                           var payload = mc.getPayloadJSON();
                           
                           var txnDate = mc.getProperty('uri.var.txnDate');
                           var privateNote = mc.getProperty('uri.var.privateNote');
                           var txnStatus = mc.getProperty('uri.var.txnStatus');
                           var line = mc.getProperty('uri.var.line');
                           var aRAccountRef = mc.getProperty('uri.var.aRAccountRef');
                           var depositToAccountRef = mc.getProperty('uri.var.depositToAccountRef');
                           var paymentMethodRef = mc.getProperty('uri.var.paymentMethodRef');
                           var paymentRefNum = mc.getProperty('uri.var.paymentRefNum');
                           var creditCardPayment = mc.getProperty('uri.var.creditCardPayment');
                           var processPayment = mc.getProperty('uri.var.processPayment');
                           var currencyRef = mc.getProperty('uri.var.currencyRef');
                           var exchangeRate = mc.getProperty('uri.var.exchangeRate');
                         
                           if (txnDate != null && txnDate != "") {
                                  payload.TxnDate = txnDate;
                           }
                           
                           if (privateNote != null && privateNote != "") {
                                  payload.PrivateNote = privateNote;
                           }                         
                           
                           if (txnStatus != null && txnStatus != "") {
                                  payload.TxnStatus = txnStatus;
                           }                            
 	                      
	                       if (line != null && line != "") {
                                  payload.Line = eval("("+line+")"); 	
                           } 
	                                                 
                           if (aRAccountRef != null && aRAccountRef != "") {
                                  payload.ARAccountRef = eval("("+aRAccountRef+")"); 	
                           }                         
                           
                           if (depositToAccountRef != null && depositToAccountRef != "") {
                                  payload.DepositToAccountRef = eval("("+depositToAccountRef+")"); 	
                           }                           
                           
                           if (paymentMethodRef != null && paymentMethodRef != "") {
                                  payload.PaymentMethodRef = eval("("+paymentMethodRef+")"); 	
                           }                            
                           
                           if (paymentRefNum != null && paymentRefNum != "") {
                                  payload.PaymentRefNum = paymentRefNum;
                           }                           
 
                           if (creditCardPayment != null && creditCardPayment != "") {
                                  payload.CreditCardPayment = eval("("+creditCardPayment+")"); 	
                           }                           
                           
                           if (processPayment != null && processPayment != "") {
                                  payload.ProcessPayment = processPayment;
                           } 
                           
                           if (currencyRef != null && currencyRef != "") {
                                  payload.CurrencyRef = eval("("+currencyRef+")"); 	
                           } 
                           
                           if (exchangeRate != null && exchangeRate != "") {
                                  payload.ExchangeRate = exchangeRate;
                           } 
                         
                           mc.setPayloadJSON(payload); 
                     ]]>

		</script>

		<call>
			<endpoint>
				<http method="post" uri-template="legacy-encoding:{uri.var.apiUrl}{uri.var.uriRemainder}" />
			</endpoint>
		</call>
		
		<!-- Remove response custom header information -->
		<header name="intuit_tid" scope="transport" action="remove" />
		<header name="QBO-Version" scope="transport" action="remove" />
		<header name="Vary" scope="transport" action="remove" />
		<header name="Via" scope="transport" action="remove" />		

	</sequence>
</template>