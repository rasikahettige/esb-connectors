<template name="updateEstimate" xmlns="http://ws.apache.org/ns/synapse">
	<!-- required parameters -->
	<parameter name="id" description="Unique Identifier for an Intuit entity (object)." />
	<parameter name="syncToken" description="Version number of the entity." />
	<parameter name="line" description="A line item of a transaction." />
	<parameter name="customerRef" description="Reference to a Customer or job." />

	<!-- optional parameters -->
	<parameter name="domain" description="The domain of the update transaction." />
	<parameter name="isSparse" description="Boolean value to specify weather the update is a full or a sparse update." />
	<parameter name="customField" description="Custom field or data extension." />
	<parameter name="docNumber" description="Reference number for the transaction." />
	<parameter name="txnDate" description="The date entered by the user when this transaction occurred." />
	<parameter name="departmentRef" description="Location of the transaction, as defined using location tracking in QuickBooks Online." />
	<parameter name="currencyRef" description="Reference to the Currency in which all amounts on the associated transaction are expressed." />
	<parameter name="exchangeRate" description="Currency exchange rate." />
	<parameter name="privateNote" description="User entered, organization-private note about the transaction." />
	<parameter name="txnStatus" description="The values accepted are defined in QboEstimateStatusEnum." />
	<parameter name="linkedTxn" description="A linked (related) transaction. More than one transaction can be linked." />
	<parameter name="txnTaxDetail" description="Details of taxes charged on the transaction as a whole." />
	<parameter name="customerMemo"
		description="This is the user-entered message to the customer that does appear in the invoice, and does appear in the printed invoice." />
	<parameter name="billAddr" description="Bill-to address of the Invoice." />
	<parameter name="shipAddr" description="Identifies the address where the goods must be shipped." />
	<parameter name="classRef" description="Reference to the Class associated with the transaction." />
	<parameter name="salesTermRef" description="Reference to the SalesTerm associated with the transaction." />
	<parameter name="shipMethodRef" description="Reference to the ShipMethod associated with the transaction." />
	<parameter name="shipDate" description="Date for delivery of goods or services." />
	<parameter name="globalTaxCalculation" description="Method in which tax is applied." />
	<parameter name="totalAmt" description="Indicates the total amount of the transaction." />
	<parameter name="applyTaxAfterDiscount" description="If false or null, calculate the sales tax first, and then apply the discount." />
	<parameter name="printStatus" description="Printing status of the invoice." />
	<parameter name="emailStatus" description="Email status of the invoice." />
	<parameter name="billEmail" description="Identifies the e-mail address where the invoice is sent." />
	<parameter name="expirationDate" description="Date by which estimate must be accepted before invalidation." />
	<parameter name="acceptedBy" description="Name of customer who accepted the estimate." />
	<parameter name="acceptedDate" description="Date estimate was accepted." />

	<sequence>

		<property name="uri.var.id" expression="$func:id" />
		<property name="uri.var.syncToken" expression="$func:syncToken" />
		<property name="uri.var.domain" expression="$func:domain" />
		<property name="uri.var.isSparse" expression="$func:isSparse" />

		<property name="uri.var.customField" expression="$func:customField" />
		<property name="uri.var.docNumber" expression="$func:docNumber" />
		<property name="uri.var.txnDate" expression="$func:txnDate" />
		<property name="uri.var.departmentRef" expression="$func:departmentRef" />
		<property name="uri.var.currencyRef" expression="$func:currencyRef" />
		<property name="uri.var.exchangeRate" expression="$func:exchangeRate" />
		<property name="uri.var.privateNote" expression="$func:privateNote" />
		<property name="uri.var.txnStatus" expression="$func:txnStatus" />
		<property name="uri.var.linkedTxn" expression="$func:linkedTxn" />
		<property name="uri.var.line" expression="$func:line" />
		<property name="uri.var.txnTaxDetail" expression="$func:txnTaxDetail" />
		<property name="uri.var.customerRef" expression="$func:customerRef" />
		<property name="uri.var.customerMemo" expression="$func:customerMemo" />
		<property name="uri.var.billAddr" expression="$func:billAddr" />
		<property name="uri.var.shipAddr" expression="$func:shipAddr" />
		<property name="uri.var.classRef" expression="$func:classRef" />
		<property name="uri.var.salesTermRef" expression="$func:salesTermRef" />
		<property name="uri.var.shipMethodRef" expression="$func:shipMethodRef" />
		<property name="uri.var.shipDate" expression="$func:shipDate" />
		<property name="uri.var.globalTaxCalculation" expression="$func:globalTaxCalculation" />
		<property name="uri.var.totalAmt" expression="$func:totalAmt" />
		<property name="uri.var.applyTaxAfterDiscount" expression="$func:applyTaxAfterDiscount" />
		<property name="uri.var.printStatus" expression="$func:printStatus" />
		<property name="uri.var.emailStatus" expression="$func:emailStatus" />
		<property name="uri.var.billEmail" expression="$func:billEmail" />
		<property name="uri.var.expirationDate" expression="$func:expirationDate" />
		<property name="uri.var.acceptedBy" expression="$func:acceptedBy" />
		<property name="uri.var.acceptedDate" expression="$func:acceptedDate" />
		<property name="uri.var.uriRemainder" expression="fn:concat('/company/',get-property('uri.var.companyId'),'/estimate?operation=update')" />
		<property name="uri.var.params" value="" />
		<property name="uri.var.method" value="POST" />

		<!-- Authentication Header Setup and call the API -->
		<class name="org.wso2.carbon.connector.quickbooks.auth.QuickBooksOAuthSignpost" />

		<filter source="boolean(get-property('auth'))" regex="true">
			<then>
				<property name="Authorization" expression="get-property('auth')" scope="transport" type="STRING" />
			</then>
		</filter>
		<payloadFactory media-type="json">
			<format>
				{
				"Id":"$1",
				"CustomerRef": $2,
				"SyncToken":"$3",
				"Line":$4
				}
			</format>
			<args>
				<arg expression="get-property('uri.var.id')" />
				<arg expression="get-property('uri.var.customerRef')" />
				<arg expression="get-property('uri.var.syncToken')" />
				<arg expression="get-property('uri.var.line')" />
			</args>
		</payloadFactory>

		<script language="js">
                    <![CDATA[
                    
                      //request body param variables
                      var payload = mc.getPayloadJSON();
                          
                      var customField = mc.getProperty('uri.var.customField');
                      var docNumber = mc.getProperty('uri.var.docNumber');
                      var txnDate = mc.getProperty('uri.var.txnDate');
                      var departmentRef = mc.getProperty('uri.var.departmentRef');
                      var currencyRef = mc.getProperty('uri.var.currencyRef');
                      var exchangeRate = mc.getProperty('uri.var.exchangeRate');
                      var privateNote = mc.getProperty('uri.var.privateNote');
                      var txnStatus = mc.getProperty('uri.var.txnStatus');
                      var linkedTxn = mc.getProperty('uri.var.linkedTxn');
                      var txnTaxDetail = mc.getProperty('uri.var.txnTaxDetail');
                      var customerMemo = mc.getProperty('uri.var.customerMemo');
                      var billAddr = mc.getProperty('uri.var.billAddr');
                      var shipAddr = mc.getProperty('uri.var.shipAddr');
                      var classRef = mc.getProperty('uri.var.classRef');
                      var salesTermRef = mc.getProperty('uri.var.salesTermRef');
                      var shipMethodRef = mc.getProperty('uri.var.shipMethodRef');
                      var shipDate = mc.getProperty('uri.var.shipDate');
                      var globalTaxCalculation = mc.getProperty('uri.var.globalTaxCalculation');
                      var totalAmt = mc.getProperty('uri.var.totalAmt');
                      var applyTaxAfterDiscount = mc.getProperty('uri.var.applyTaxAfterDiscount');
                      var printStatus = mc.getProperty('uri.var.printStatus');
                      var emailStatus = mc.getProperty('uri.var.emailStatus');
                      var billEmail = mc.getProperty('uri.var.billEmail');
                      var expirationDate = mc.getProperty('uri.var.expirationDate');
                      var acceptedBy = mc.getProperty('uri.var.acceptedBy');
                      var acceptedDate = mc.getProperty('uri.var.acceptedDate');
                      var domain = mc.getProperty('uri.var.domain');
                      var isSparse = mc.getProperty('uri.var.isSparse');
                                           
                      if (customField != null && customField != "") {
                             payload.CustomField = eval("("+customField+")"); 
                      }                         
                      
                      if (docNumber != null && docNumber != "") {
                             payload.DocNumber = docNumber; 
                      }                        
                      
                      if (txnDate != null && txnDate != "") {
                             payload.TxnDate = txnDate; 
                      }                       
                      
                      if (departmentRef != null && departmentRef != "") {
                             payload.DepartmentRef = eval("("+departmentRef+")"); 
                      }                        
                      
                      if (currencyRef != null && currencyRef != "") {
                             payload.CurrencyRef = eval("("+currencyRef+")"); 
                      }                     
                      
                      if (exchangeRate != null && exchangeRate != "") {
                              payload.ExchangeRate= exchangeRate;
                      } 
                       
                      if (privateNote != null && privateNote != "") {
                              payload.PrivateNote= privateNote;
                      }    
                      
                      if (txnStatus != null && txnStatus != "") {
                              payload.TxnStatus= txnStatus;
                      }                                           
                     
                      if (linkedTxn != null && linkedTxn != "") {
                              payload.LinkedTxn = eval("("+linkedTxn+")"); 
                      }  
                                                                   
                      if (txnTaxDetail != null && txnTaxDetail != "") {
                              payload.TxnTaxDetail = eval("("+txnTaxDetail+")"); 
                      }                                            
                      
                      if (customerMemo != null && customerMemo != "") {
                              payload.CustomerMemo = eval("("+customerMemo+")"); 
                      }                      
                                           
                      if (billAddr != null && billAddr != "") {
                              payload.BillAddr = eval("("+billAddr+")"); 
                      }                      
                      
                      if (shipAddr != null && shipAddr != "") {
                              payload.ShipAddr = eval("("+shipAddr+")"); 
                      }                        
                      
                      if (classRef != null && classRef != "") {
                              payload.ClassRef = eval("("+classRef+")"); 
                      }       
                                       
                      if (salesTermRef != null && salesTermRef != "") {
                              payload.SalesTermRef = eval("("+salesTermRef+")"); 
                      }   
                          
                      if (shipMethodRef != null && shipMethodRef != "") {
                              payload.ShipMethodRef = eval("("+shipMethodRef+")"); 
                      }                    
                      
                      if (shipDate != null && shipDate != "") {
                              payload.ShipDate = shipDate; 
                      }                       
                       
                      if (globalTaxCalculation != null && globalTaxCalculation != "") {
                              payload.GlobalTaxCalculation = globalTaxCalculation;
                      }  
                      
                      if (totalAmt != null && totalAmt != "") {
                              payload.TotalAmt = totalAmt;
                      } 
                      
                      if (applyTaxAfterDiscount != null && applyTaxAfterDiscount != "") {
                              payload.ApplyTaxAfterDiscount = applyTaxAfterDiscount;
                      }                      
                           
                      if (printStatus != null && printStatus != "") {
                              payload.PrintStatus = printStatus;
                      }         
                      
                      if (emailStatus != null && emailStatus != "") {
                              payload.EmailStatus = emailStatus;
                      }        
                      
                      if (billEmail != null && billEmail != "") {
                              payload.BillEmail = eval("("+billEmail+")"); 
                      }  
                      
                      if (expirationDate != null && expirationDate != "") {
                              payload.ExpirationDate = expirationDate;
                      }     
                      
                      if (acceptedBy != null && acceptedBy != "") {
                              payload.AcceptedBy = acceptedBy;
                      }    
                                                                                                         
                      if (acceptedDate != null && acceptedDate != "") {
                              payload.AcceptedDate = acceptedDate;
                      }  
                      
                      if (domain != null && domain != "") {
                              payload.domain = domain;
                      }    
                                                                                                         
                      if (isSparse != null && isSparse != "") {
                              payload.sparse = isSparse;
                      }                                                
                                                                                                              
                      mc.setPayloadJSON(payload); 
                    ]]>

		</script>

		<call>
			<endpoint>
				<http method="post" uri-template="legacy-encoding:{uri.var.apiUrl}{uri.var.uriRemainder}" />
			</endpoint>
		</call>

		<!-- Remove response custom header information -->
		<header name="intuit_tid" scope="transport" action="remove" />
		<header name="QBO-Version" scope="transport" action="remove" />
		<header name="Vary" scope="transport" action="remove" />
		<header name="Via" scope="transport" action="remove" />

	</sequence>
</template>