<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied. See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<template name="listContacts" xmlns="http://ws.apache.org/ns/synapse">
   <!-- API Documentation URL - https://www.zoho.com/books/api/v3/contacts/#list-contacts -->
   <parameter name="sortColumn"
      description="Sort contacts. Allowed Values: contact_name, first_name, last_name, email, outstanding_receivable_amount, outstanding_payable_amount, created_time and last_modified_time" />
   <parameter name="searchText" description="Search contacts by contact name or notes." />
   <parameter name="filterBy"
      description="Filter contacts by status. Allowed Values: Status.All, Status.Active, Status.Inactive, Status.Duplicate, Status.Customers, Status.Vendors and Status." />
   <parameter name="phoneStartsWith" description="Search contacts by contact phone no - startsWith." />
   <parameter name="companyNameStartsWith" description="Search contacts by company name - startswith." />
   <parameter name="phone" description="Search contacts by phone number of the contact person." />
   <parameter name="firstNameContains" description="Search contacts by first name of the contact person - contains." />
   <parameter name="lastNameContains" description="Search contacts by last name of the contact person - contains." />
   <parameter name="emailContains" description="Search contacts by email of the contact person - contains." />
   <parameter name="phoneContains" description="Search contacts by phone of the contact person - contains." />
   <parameter name="companyNameContains" description="Search contacts by company name - contains." />
   <parameter name="contactNameStartsWith" description="Search contacts by contact name - startsWith." />
   <parameter name="contactNameContains" description="Search contacts by company name - startsWith." />
   <parameter name="lastName" description="Search contacts by last name of the contact person." />
   <parameter name="email" description="Search contacts by email of the contact person." />
   <parameter name="companyName" description="Search contacts by company name." />
   <parameter name="lastNameStartsWith" description="Search contacts by contact last name - startsWith." />
   <parameter name="firstNameStartsWith" description="Search contacts by contact first name - startsWith." />
   <parameter name="emailStartsWith" description="Search contacts by contact email - startsWith." />
   <parameter name="address" description="Search contacts by any of the address fields." />
   <parameter name="addressStartsWith" description="Search contacts by any of the address fields." />
   <parameter name="addressContains" description="Search contacts by address of the contact person - contains." />
   <parameter name="contactName" description="Search contacts by contact name." />
   <parameter name="firstName" description="Search contacts by first name of the contact person." />
   <parameter name="page" description="No. of page to be returned - Pagination value." />
   <parameter name="perPage" description="Specifies how mny entried should be returned in the response." />
   <parameter name="appliedFilter" description="Filters to be applied while querying." />
   <parameter name="sortOrder" description="Order of sorting - Ascending or Descending" />
   <sequence>
      <property name="uri.var.page" expression="$func:page" />
      <property name="uri.var.appliedFilter" expression="$func:appliedFilter" />
      <property name="uri.var.perPage" expression="$func:perPage" />
      <property name="uri.var.sortOrder" expression="$func:sortOrder" />
      <property name="uri.var.sortColumn" expression="$func:sortColumn" />
      <property name="uri.var.searchText" expression="$func:searchText" />
      <property name="uri.var.filterBy" expression="$func:filterBy" />
      <property name="uri.var.phoneStartsWith" expression="$func:phoneStartsWith" />
      <property name="uri.var.companyNameStartsWith" expression="$func:companyNameStartsWith" />
      <property name="uri.var.phone" expression="$func:phone" />
      <property name="uri.var.firstNameContains" expression="$func:firstNameContains" />
      <property name="uri.var.lastNameContains" expression="$func:lastNameContains" />
      <property name="uri.var.emailContains" expression="$func:emailContains" />
      <property name="uri.var.phoneContains" expression="$func:phoneContains" />
      <property name="uri.var.companyNameContains" expression="$func:companyNameContains" />
      <property name="uri.var.contactNameStartsWith" expression="$func:contactNameStartsWith" />
      <property name="uri.var.contactNameContains" expression="$func:contactNameContains" />
      <property name="uri.var.lastName" expression="$func:lastName" />
      <property name="uri.var.email" expression="$func:email" />
      <property name="uri.var.companyName" expression="$func:companyName" />
      <property name="uri.var.lastNameStartsWith" expression="$func:lastNameStartsWith" />
      <property name="uri.var.firstNameStartsWith" expression="$func:firstNameStartsWith" />
      <property name="uri.var.emailStartsWith" expression="$func:emailStartsWith" />
      <property name="uri.var.address" expression="$func:address" />
      <property name="uri.var.addressStartsWith" expression="$func:addressStartsWith" />
      <property name="uri.var.addressContains" expression="$func:addressContains" />
      <property name="uri.var.contactName" expression="$func:contactName" />
      <property name="uri.var.firstName" expression="$func:firstName" />

      <script language="js">
         <![CDATA[
            var page = mc.getProperty('uri.var.page');
            var appliedFilter = mc.getProperty('uri.var.appliedFilter');
            var perPage = mc.getProperty('uri.var.perPage');
            var sortOrder = mc.getProperty('uri.var.sortOrder');
            var address = mc.getProperty('uri.var.address');
            var addressContains = mc.getProperty('uri.var.addressContains');
            var addressStartsWith = mc.getProperty('uri.var.addressStartsWith');
            var companyName = mc.getProperty('uri.var.companyName');
            var companyNameContains = mc.getProperty('uri.var.companyNameContains');
            var companyNameStartsWith = mc.getProperty('uri.var.companyNameStartsWith');
            var contactName = mc.getProperty('uri.var.contactName');
            var contactNameContains = mc.getProperty('uri.var.contactNameContains');
            var contactNameStartsWith = mc.getProperty('uri.var.contactNameStartsWith');
            var email = mc.getProperty('uri.var.email');
            var emailContains = mc.getProperty('uri.var.emailContains');
            var emailStartsWith = mc.getProperty('uri.var.emailStartsWith');
            var filterBy = mc.getProperty('uri.var.filterBy');
            var firstName = mc.getProperty('uri.var.firstName');
            var firstNameContains = mc.getProperty('uri.var.firstNameContains');
            var firstNameStartsWith = mc.getProperty('uri.var.firstNameStartsWith');
            var lastName = mc.getProperty('uri.var.lastName');
            var lastNameContains = mc.getProperty('uri.var.lastNameContains');
            var lastNameStartsWith = mc.getProperty('uri.var.lastNameStartsWith');
            var phone = mc.getProperty('uri.var.phone');
            var phoneContains = mc.getProperty('uri.var.phoneContains');
            var phoneStartsWith = mc.getProperty('uri.var.phoneStartsWith');
            var searchText = mc.getProperty('uri.var.searchText');
            var sortColumn = mc.getProperty('uri.var.sortColumn');
            var authToken = mc.getProperty('uri.var.authToken');
            var organizationId = mc.getProperty('uri.var.organizationId');
            
            var urlQuery = '?authtoken=' + authToken + '&organization_id=' + organizationId + '&';
            
            if (address != null && address != ""){
               urlQuery += 'address=' + address + '&';
            }
            
            if (addressContains != null && addressContains != ""){
               urlQuery += 'address_contains=' + addressContains + '&';
            }
            
            if (addressStartsWith != null && addressStartsWith != ""){
               urlQuery += 'address_startswith=' + addressStartsWith + '&';
            }
            
            if (companyName != null && companyName != ""){
               urlQuery += 'company_name=' + companyName + '&';
            }
            
            if (companyNameContains != null && companyNameContains != ""){
               urlQuery += 'company_name_contains=' + companyNameContains + '&';
            }
            
            if (companyNameStartsWith != null && companyNameStartsWith != ""){
               urlQuery += 'company_name_startswith=' + companyNameStartsWith + '&';
            }
            
            if (contactName != null && contactName != ""){
               urlQuery += 'contact_name=' + contactName + '&';
            }
            
            if (contactNameContains != null && contactNameContains != ""){
               urlQuery += 'contact_name_contains=' + contactNameContains + '&';
            }
            
            if (contactNameStartsWith != null && contactNameStartsWith != ""){
               urlQuery += 'contact_name_startswith=' + contactNameStartsWith + '&';
            }
            
            if (email != null && email != ""){
               urlQuery += 'email=' + email + '&';
            }
            
            if (emailContains != null && emailContains != ""){
               urlQuery += 'email_contains=' + emailContains + '&';
            }
            
            if (emailStartsWith != null && emailStartsWith != ""){
               urlQuery += 'email_startswith=' + emailStartsWith + '&';
            }
            
            if (filterBy != null && filterBy != ""){
               urlQuery += 'filter_by=' + filterBy + '&';
            }
            
            if (firstName != null && firstName != ""){
               urlQuery += 'first_name=' + firstName + '&';
            }
            
            if (firstNameContains != null && firstNameContains != ""){
               urlQuery += 'first_name_contains=' + firstNameContains + '&';
            }
            
            if (firstNameStartsWith != null && firstNameStartsWith != ""){
               urlQuery += 'first_name_startswith=' + firstNameStartsWith + '&';
            }
            
            if (lastName != null && lastName != ""){
               urlQuery += 'last_name=' + lastName + '&';
            }
            
            if (lastNameContains != null && lastNameContains != ""){
               urlQuery += 'last_name_contains=' + lastNameContains + '&';
            }
            
            if (lastNameStartsWith != null && lastNameStartsWith != ""){
               urlQuery += 'last_name_startswith=' + lastNameStartsWith + '&';
            }
            
            if (phone != null && phone != ""){
               urlQuery += 'phone=' + phone + '&';
            }
            
            if (phoneContains != null && phoneContains != ""){
               urlQuery += 'phone_contains=' + phoneContains + '&';
            }
            
            if (phoneStartsWith != null && phoneStartsWith != ""){
               urlQuery += 'phone_startswith=' + phoneStartsWith + '&';
            }
            
            if (searchText != null && searchText != ""){
               urlQuery += 'search_text=' + searchText + '&';
            }
            
            if (sortColumn != null && sortColumn != ""){
               urlQuery += 'sort_column=' + sortColumn + '&';
            }
            
            if (page != null && page != ""){
               urlQuery += 'page=' + page + '&';
            }
            
            if (perPage != null && perPage != ""){
               urlQuery += 'per_page=' + perPage + '&';
            }
            
            if (appliedFilter != null && appliedFilter != ""){
               urlQuery += 'applied_filter=' + appliedFilter + '&';
            }
            
            if (sortOrder != null && sortOrder != ""){
               urlQuery += 'sort_order=' + sortOrder + '&';
            }
            
            // Remove the trailing '&'
            urlQuery = urlQuery.substring(0, urlQuery.length - 1);
            mc.setProperty('uri.var.urlQuery', encodeURI(urlQuery));
            
         ]]>
      </script>

      <call>
         <endpoint>
            <http method="get" uri-template="legacy-encoding:{uri.var.apiUrl}/contacts{uri.var.urlQuery}" />
         </endpoint>
      </call>

	  <!--Removing custom headers from the Response.-->
      <header name="X-Rate-Limit-Limit" action="remove" scope="transport" />
      <header name="X-XSS-Protection" action="remove" scope="transport" />
      <header name="X-Rate-Limit-Remaining" action="remove" scope="transport" />
      <header name="Cache-Control" action="remove" scope="transport" />
      <header name="Pragma" action="remove" scope="transport" />
      <header name="X-Content-Type-Options" action="remove" scope="transport" />
      <header name="BUILD_VERSION" action="remove" scope="transport" />
      <header name="Strict-Transport-Security" action="remove" scope="transport" />
      <header name="Vary" action="remove" scope="transport" />
      <header name="Content-Disposition" action="remove" scope="transport" />
      <header name="X-Rate-Limit-Reset" action="remove" scope="transport" />
      <header name="Status" action="remove" scope="transport" />

   </sequence>
</template>