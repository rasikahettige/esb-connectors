<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied. See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<template name="createContact" xmlns="http://ws.apache.org/ns/synapse">
   <!-- API Documentation URL - https://www.zoho.com/books/api/v3/contacts/#create-a-contact -->
   <parameter name="vatRegNo" description="VAT Registration number of a contact with VAT treatment as eu_vat_registered." />
   <parameter name="countryCode"
      description="For UK Edition: Two letter country code of a contact with VAT treatment as eu_vat_registered. For Avalara: Two letter country code for the customer country, if your customer is not in US." />
   <parameter name="avataxUseCode"
      description="Used to group like customers for exemption purposes. It is a custom value that links customers to a tax rule. Select from Avalara standard codes or enter a custom code." />
   <parameter name="taxExemptionId" description="ID of the tax exemption (US Edition only)." />
   <parameter name="vatTreatment"
      description="VAT treatment of the contact. Allowed Values: uk, eu_vat_not_registered, eu_vat_registered and non_eu (UK Edition only)." />
   <parameter name="avataxExemptNo" description="Exemption certificate number of the customer (Avalara integration only)." />
   <parameter name="taxAuthorityId"
      description="ID of the tax authority. Tax authority depends on the location of the customer. For example, if the customer is located in NY, then the tax authority is NY tax authority (US Edition only)." />
   <parameter name="taxId"
      description="ID of the tax or tax group that can be collected from the contact. Tax can be given only if is_taxable is true (US Edition only)." />
   <parameter name="taxIdValue"
      description="Tax ID of the contact. (This node is only available when the organization's country is U.S.A)" />
   <parameter name="taxIdType"
      description="Tax ID type of the contact, it can be SSN, ATIN, ITIN or EIN. (This node is only available when the organization's country is U.S.A)" />
   <parameter name="track1099"
      description="Boolean to track a contact for 1099 reporting. (This node is only available when the organization's country is U.S.A)" />
   <parameter name="contactPersons" description="Contact persons of a contact." />
   <parameter name="shippingAddress" description="Shipping address of the contact." />
   <parameter name="billingAddress" description="Billing address of the contact." />
   <parameter name="customFields" description="Custom fields of the contact." />
   <parameter name="website" description="Website of the contact." />
   <parameter name="companyName" description="Company Name of the contact." />
   <parameter name="contactName" description="Display Name of the contact." />
   <parameter name="isTaxable" description="Boolean to track the taxability of the customer (US Edition only)." />
   <parameter name="defaultTemplates" description="Default templates for the Contact." />
   <parameter name="paymentTerms" description="Payment terms for a contact." />
   <parameter name="paymentTermsLabel" description="Payment terms label for a contact." />
   <parameter name="currencyId" description="Currency Id of a contact." />
   <parameter name="notes" description="Notes to be added to the Contact." />
   <sequence>
      <property name="uri.var.vatRegNo" expression="$func:vatRegNo" />
      <property name="uri.var.countryCode" expression="$func:countryCode" />
      <property name="uri.var.avataxUseCode" expression="$func:avataxUseCode" />
      <property name="uri.var.taxExemptionId" expression="$func:taxExemptionId" />
      <property name="uri.var.vatTreatment" expression="$func:vatTreatment" />
      <property name="uri.var.avataxExemptNo" expression="$func:avataxExemptNo" />
      <property name="uri.var.taxAuthorityId" expression="$func:taxAuthorityId" />
      <property name="uri.var.taxId" expression="$func:taxId" />
      <property name="uri.var.taxIdValue" expression="$func:taxIdValue" />
      <property name="uri.var.taxIdType" expression="$func:taxIdType" />
      <property name="uri.var.track1099" expression="$func:track1099" />
      <property name="uri.var.contactPersons" expression="$func:contactPersons" />
      <property name="uri.var.shippingAddress" expression="$func:shippingAddress" />
      <property name="uri.var.billingAddress" expression="$func:billingAddress" />
      <property name="uri.var.customFields" expression="$func:customFields" />
      <property name="uri.var.website" expression="$func:website" />
      <property name="uri.var.companyName" expression="$func:companyName" />
      <property name="uri.var.contactName" expression="$func:contactName" />
      <property name="uri.var.isTaxable" expression="$func:isTaxable" />
      <property name="uri.var.defaultTemplates" expression="$func:defaultTemplates" />
      <property name="uri.var.notes" expression="$func:notes" />
      <property name="uri.var.paymentTerms" expression="$func:paymentTerms" />
      <property name="uri.var.paymentTermsLabel" expression="$func:paymentTermsLabel" />
      <property name="uri.var.currencyId" expression="$func:currencyId" />

      <payloadFactory media-type="json">
         <format>
            {"contact_name": "$1"}
         </format>
         <args>
            <arg expression="get-property('uri.var.contactName')" />
         </args>
      </payloadFactory>

      <script language="js">
         <![CDATA[
            var jsonPayload = mc.getPayloadJSON();
            
            var avataxExemptNo = mc.getProperty('uri.var.avataxExemptNo');
            var avataxUseCode = mc.getProperty('uri.var.avataxUseCode');
            var billingAddress = mc.getProperty('uri.var.billingAddress');
            var companyName = mc.getProperty('uri.var.companyName');
            var contactPersons = mc.getProperty('uri.var.contactPersons');
            var countryCode = mc.getProperty('uri.var.countryCode');
            var customFields = mc.getProperty('uri.var.customFields');
            var defaultTemplates = mc.getProperty('uri.var.defaultTemplates');
            var isTaxable = mc.getProperty('uri.var.isTaxable');
            var notes = mc.getProperty('uri.var.notes');
            var shippingAddress = mc.getProperty('uri.var.shippingAddress');
            var taxAuthorityId = mc.getProperty('uri.var.taxAuthorityId');
            var taxExemptionId = mc.getProperty('uri.var.taxExemptionId');
            var taxId = mc.getProperty('uri.var.taxId');
            var taxIdType = mc.getProperty('uri.var.taxIdType');
            var taxIdValue = mc.getProperty('uri.var.taxIdValue');
            var track1099 = mc.getProperty('uri.var.track1099');
            var vatRegNo = mc.getProperty('uri.var.vatRegNo');
            var vatTreatment = mc.getProperty('uri.var.vatTreatment');
            var website = mc.getProperty('uri.var.website');
            var authToken = mc.getProperty('uri.var.authToken');
            var organizationId = mc.getProperty('uri.var.organizationId');
			var paymentTerms = mc.getProperty('uri.var.paymentTerms');
            var paymentTermsLabel = mc.getProperty('uri.var.paymentTermsLabel');
            var currencyId = mc.getProperty('uri.var.currencyId');
            
            var urlQuery = '?authtoken=' + authToken + '&organization_id=' + organizationId;
            mc.setProperty('uri.var.urlQuery', urlQuery);
            
            if (avataxExemptNo != null && avataxExemptNo != ""){
               jsonPayload["avatax_exempt_no"] = avataxExemptNo;
            }
            
            if (avataxUseCode != null && avataxUseCode != ""){
               jsonPayload["avatax_use_code"] = avataxUseCode;
            }
            
            if (billingAddress != null && billingAddress != ""){
               jsonPayload["billing_address"] = eval("(" + billingAddress + ")");
            }
            
            if (companyName != null && companyName != ""){
               jsonPayload["company_name"] = companyName;
            }
            
            if (contactPersons != null && contactPersons != ""){
               jsonPayload["contact_persons"] = eval("(" + contactPersons + ")");
            }
            
            if (countryCode != null && countryCode != ""){
               jsonPayload["country_code"] = countryCode;
            }
            
            if (customFields != null && customFields != ""){
               jsonPayload["custom_fields"] = eval("(" + customFields + ")");
            }
            
            if (defaultTemplates != null && defaultTemplates != ""){
               jsonPayload["default_templates"] = eval("(" + defaultTemplates + ")");
            }
            
            if (isTaxable != null && isTaxable != ""){
               jsonPayload["is_taxable"] = isTaxable;
            }
            
            if (notes != null && notes != ""){
               jsonPayload["notes"] = notes;
            }
            
            if (shippingAddress != null && shippingAddress != ""){
               jsonPayload["shipping_address"] = eval("(" + shippingAddress + ")");
            }
            
            if (taxAuthorityId != null && taxAuthorityId != ""){
               jsonPayload["tax_authority_id"] = taxAuthorityId;
            }
            
            if (taxExemptionId != null && taxExemptionId != ""){
               jsonPayload["tax_exemption_id"] = taxExemptionId;
            }
            
            if (taxId != null && taxId != ""){
               jsonPayload["tax_id"] = taxId;
            }
            
            if (taxIdType != null && taxIdType != ""){
               jsonPayload["tax_id_type"] = taxIdType;
            }
            
            if (taxIdValue != null && taxIdValue != ""){
               jsonPayload["tax_id_value"] = taxIdValue;
            }
            
            if (track1099 != null && track1099 != ""){
               jsonPayload["track_1099"] = track1099;
            }
            
            if (vatRegNo != null && vatRegNo != ""){
               jsonPayload["vat_reg_no"] = vatRegNo;
            }
            
            if (vatTreatment != null && vatTreatment != ""){
               jsonPayload["vat_treatment"] = vatTreatment;
            }
            
            if (website != null && website != ""){
               jsonPayload["website"] = website;
            }
			
			if (paymentTerms != null && paymentTerms != ""){
               jsonPayload["payment_terms"] = paymentTerms;
            }
            
            if (paymentTermsLabel != null && paymentTermsLabel != ""){
               jsonPayload["payment_terms_label"] = paymentTermsLabel;
            }
            
            if (currencyId != null && currencyId != ""){
               jsonPayload["currency_id"] = currencyId;
            }
            
            mc.setPayloadJSON(jsonPayload);
         ]]>
      </script>

      <!--Extract the JSON object to a Property. -->
      <property name="uri.var.jsonString" expression="json-eval($)" />

      <!--This script mediator is used for the purpose of URL encoding the JSON Object that was built in the Script Mediator
         above. -->
      <script language="js">
         <![CDATA[
			var jsonString = mc.getProperty('uri.var.jsonString');
			var urlQuery = mc.getProperty('uri.var.urlQuery');
			
			urlQuery += '&JSONString=' + encodeURIComponent(jsonString);
			mc.setProperty('uri.var.urlQuery', urlQuery);
         ]]>
      </script>

      <call>
         <endpoint>
            <http method="post" uri-template="legacy-encoding:{uri.var.apiUrl}/contacts{uri.var.urlQuery}" />
         </endpoint>
      </call>

      <!--Removing custom headers from the Response. -->
      <header name="X-Rate-Limit-Limit" action="remove" scope="transport" />
      <header name="X-XSS-Protection" action="remove" scope="transport" />
      <header name="X-Rate-Limit-Remaining" action="remove" scope="transport" />
      <header name="Cache-Control" action="remove" scope="transport" />
      <header name="Pragma" action="remove" scope="transport" />
      <header name="X-Content-Type-Options" action="remove" scope="transport" />
      <header name="BUILD_VERSION" action="remove" scope="transport" />
      <header name="Strict-Transport-Security" action="remove" scope="transport" />
      <header name="Vary" action="remove" scope="transport" />
      <header name="Content-Disposition" action="remove" scope="transport" />
      <header name="X-Rate-Limit-Reset" action="remove" scope="transport" />
      <header name="Status" action="remove" scope="transport" />

   </sequence>
</template>