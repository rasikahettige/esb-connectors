<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied. See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<template name="createEstimate" xmlns="http://ws.apache.org/ns/synapse">
   <!-- API Documentation URL - https://www.zoho.com/books/api/v3/estimates/#create-an-estimate -->
   <parameter name="customerId" description="Id of the customer." />
   <parameter name="lineItems" description="Array of contain item details." />
   <parameter name="ignoreAutoNumberGeneration" description="Ignore auto estimate number generation for this estimate. This mandates the estimate number. Allowed Values: true and false" />
   <parameter name="send" description="Send the invoice to the contact person(s) associated with the estimate. Allowed Values: true and false" />
   <parameter name="contactPersons" description="Array of contact person(s) for whom estimate has to be sent." />
   <parameter name="templateId" description="ID of the pdf template associated with the estimate." />
   <parameter name="estimateNumber" description="Estimate number if auto number generation is disabled." />
   <parameter name="referenceNumber" description="Reference number for the estimate." />
   <parameter name="date" description="The date the estimate is created." />
   <parameter name="expiryDate" description="Date the estimate is valid upto." />
   <parameter name="taxId" description="ID of the tax or tax group applied to the estimate (US Edition only)." />
   <parameter name="taxAuthorityId" description="ID of the tax authority. Tax authority depends on the location of the customer. For example, if the customer is located in NY, then the tax authority is NY tax authority. (US Edition only)." />
   <parameter name="taxExemptionId" description="ID of the tax exemption (US Edition only)." />
   <parameter name="avataxUseCode" description="Used to group like customers for exemption purposes. It is a custom value that links customers to a tax rule (Avalara integration only)." />
   <parameter name="avataxExemptNo" description="Exemption certificate number of the customer (Avalara integration only)." />
   <parameter name="vatTreatment" description="VAT treatment for the invoice (UK Edition only)." />
   <parameter name="exchangeRate" description="Exchange rate of the currency." />
   <parameter name="discount" description="Discount applied to the invoice. It can be either in % or in amount. e.g. 12.5% or 190." />
   <parameter name="isDiscountBeforeTax" description="Used to specify how the discount has to applied. Either before or after the calculation of tax." />
   <parameter name="discountType" description="How the discount is specified. Allowed values are entity_level or item_level. Allowed Values: entity_level and item_level." />
   <parameter name="salesPersonName" description="Name of the sales person." />
   <parameter name="customFields" description="Array of the custom fields for an estimate." />
   <parameter name="note" description="Note for an estimate." />
   <parameter name="terms" description="Terms and conditions for the estimate." />
   <parameter name="shippingCharge" description="Shipping charges applied to the invoice." />
   <parameter name="adjustment" description="Adjustments made to the invoice." />
   <parameter name="adjustmentDescription" description="Customize the adjustment description. E.g. Rounding off." />
   <sequence>
      <property name="uri.var.customerId" expression="$func:customerId" />
      <property name="uri.var.lineItems" expression="$func:lineItems" />
      <property name="uri.var.ignoreAutoNumberGeneration" expression="$func:ignoreAutoNumberGeneration" />
      <property name="uri.var.send" expression="$func:send" />
      <property name="uri.var.contactPersons" expression="$func:contactPersons" />
      <property name="uri.var.templateId" expression="$func:templateId" />
      <property name="uri.var.estimateNumber" expression="$func:estimateNumber" />
      <property name="uri.var.referenceNumber" expression="$func:referenceNumber" />
      <property name="uri.var.date" expression="$func:date" />
      <property name="uri.var.expiryDate" expression="$func:expiryDate" />
      <property name="uri.var.taxId" expression="$func:taxId" />
      <property name="uri.var.taxAuthorityId" expression="$func:taxAuthorityId" />
      <property name="uri.var.taxExemptionId" expression="$func:taxExemptionId" />
      <property name="uri.var.avataxUseCode" expression="$func:avataxUseCode" />
      <property name="uri.var.avataxExemptNo" expression="$func:avataxExemptNo" />
      <property name="uri.var.vatTreatment" expression="$func:vatTreatment" />
      <property name="uri.var.exchangeRate" expression="$func:exchangeRate" />
      <property name="uri.var.discount" expression="$func:discount" />
      <property name="uri.var.isDiscountBeforeTax" expression="$func:isDiscountBeforeTax" />
      <property name="uri.var.discountType" expression="$func:discountType" />
      <property name="uri.var.salesPersonName" expression="$func:salesPersonName" />
      <property name="uri.var.customFields" expression="$func:customFields" />
      <property name="uri.var.note" expression="$func:note" />
      <property name="uri.var.terms" expression="$func:terms" />
      <property name="uri.var.shippingCharge" expression="$func:shippingCharge" />
      <property name="uri.var.adjustment" expression="$func:adjustment" />
      <property name="uri.var.adjustmentDescription" expression="$func:adjustmentDescription" />
      <payloadFactory media-type="json">
         <format>
            {
               "customer_id": "$1"
            }
         </format>
         <args>
            <arg expression="get-property('uri.var.customerId')" />
         </args>
      </payloadFactory>
      <script language="js">
         <![CDATA[
            var jsonPayload = mc.getPayloadJSON();
            
            var authToken = mc.getProperty('uri.var.authToken');
            var organizationId = mc.getProperty('uri.var.organizationId');
            var lineItems = mc.getProperty('uri.var.lineItems');
            var ignoreAutoNumberGeneration = mc.getProperty('uri.var.ignoreAutoNumberGeneration');
            var send = mc.getProperty('uri.var.send');
            var contactPersons = mc.getProperty('uri.var.contactPersons');
            var templateId = mc.getProperty('uri.var.templateId');
            var estimateNumber = mc.getProperty('uri.var.estimateNumber');
            var referenceNumber = mc.getProperty('uri.var.referenceNumber');
            var date = mc.getProperty('uri.var.date');
            var expiryDate = mc.getProperty('uri.var.expiryDate');
            var taxId = mc.getProperty('uri.var.taxId');
            var taxAuthorityId = mc.getProperty('uri.var.taxAuthorityId');
            var taxExemptionId = mc.getProperty('uri.var.taxExemptionId');
            var avataxUseCode = mc.getProperty('uri.var.avataxUseCode');
            var avataxExemptNo = mc.getProperty('uri.var.avataxExemptNo');
            var vatTreatment = mc.getProperty('uri.var.vatTreatment');
            var exchangeRate = mc.getProperty('uri.var.exchangeRate');
            var discount = mc.getProperty('uri.var.discount');
            var isDiscountBeforeTax = mc.getProperty('uri.var.isDiscountBeforeTax');
            var discountType = mc.getProperty('uri.var.discountType');
            var salesPersonName = mc.getProperty('uri.var.salesPersonName');
            var customFields = mc.getProperty('uri.var.customFields');
            var note = mc.getProperty('uri.var.note');
            var terms = mc.getProperty('uri.var.terms');
            var shippingCharge = mc.getProperty('uri.var.shippingCharge');
            var adjustment = mc.getProperty('uri.var.adjustment');
            var adjustmentDescription = mc.getProperty('uri.var.adjustmentDescription');
            
            var urlQuery = '?authtoken=' + authToken + '&organization_id=' + organizationId + '&';
            
            if (ignoreAutoNumberGeneration != null && ignoreAutoNumberGeneration != ""){
               urlQuery += 'ignore_auto_number_generation=' + ignoreAutoNumberGeneration + '&';
            }
            if (send != null && send != ""){
               urlQuery += 'send=' + send + '&';
            }
            
            // Remove the trailing '&'
            urlQuery = urlQuery.substring(0, urlQuery.length - 1);
            mc.setProperty('uri.var.urlQuery', urlQuery);
            
            if (lineItems != null && lineItems != ""){
               jsonPayload["line_items"] = eval("(" + lineItems + ")");
            }
            if (contactPersons != null && contactPersons != ""){
               jsonPayload["contact_persons"] = eval("(" + contactPersons + ")");
            }
            if (templateId != null && templateId != ""){
               jsonPayload["template_id"] = templateId;
            }
            if (estimateNumber != null && estimateNumber != ""){
               jsonPayload["estimate_number"] = estimateNumber;
            }
            if (referenceNumber != null && referenceNumber != ""){
               jsonPayload["reference_number"] = referenceNumber;
            }
            if (date != null && date != ""){
               jsonPayload["date"] = date;
            }
            if (expiryDate != null && expiryDate != ""){
               jsonPayload["expiry_date"] = expiryDate;
            }
            if (taxId != null && taxId != ""){
               jsonPayload["tax_id"] = taxId;
            }
            if (taxAuthorityId != null && taxAuthorityId != ""){
               jsonPayload["tax_authority_id"] = taxAuthorityId;
            }
            if (taxExemptionId != null && taxExemptionId != ""){
               jsonPayload["tax_exemption_id"] = taxExemptionId;
            }
            if (avataxUseCode != null && avataxUseCode != ""){
               jsonPayload["avatax_use_code"] = avataxUseCode;
            }
            if (avataxExemptNo != null && avataxExemptNo != ""){
               jsonPayload["avatax_exempt_no"] = avataxExemptNo;
            }
            if (vatTreatment != null && vatTreatment != ""){
               jsonPayload["vat_treatment"] = vatTreatment;
            }
            if (exchangeRate != null && exchangeRate != ""){
               jsonPayload["exchange_rate"] = exchangeRate;
            }
            if (discount != null && discount != ""){
               jsonPayload["discount"] = discount;
            }
            if (isDiscountBeforeTax != null && isDiscountBeforeTax != ""){
               jsonPayload["is_discount_before_tax"] = isDiscountBeforeTax;
            }
            if (salesPersonName != null && salesPersonName != ""){
               jsonPayload["salesperson_name"] = salesPersonName;
            }
            if (customFields != null && customFields != ""){
               jsonPayload["custom_fields"] = eval("(" + customFields + ")");
            }
            if (note != null && note != ""){
               jsonPayload["notes"] = note;
            }
            if (terms != null && terms != ""){
               jsonPayload["terms"] = terms;
            }
            if (shippingCharge != null && shippingCharge != ""){
               jsonPayload["shipping_charge"] = shippingCharge;
            }
            if (adjustment != null && adjustment != ""){
               jsonPayload["adjustment"] = adjustment;
            }
            if (adjustmentDescription != null && adjustmentDescription != ""){
               jsonPayload["adjustment_description"] = adjustmentDescription;
            }
            
            if (discountType != null && discountType != ""){
               jsonPayload["discount_type"] = discountType;
            }
            
            mc.setPayloadJSON(jsonPayload);
         ]]>
      </script>
      <!--Extract the JSON object to a Property. -->
      <property name="uri.var.jsonString" expression="json-eval($)" />
      <!--This script mediator is used for the purpose of URL encoding the JSON Object that was built in the Script Mediator
         above. -->
      <script language="js">
            <![CDATA[
   			var jsonString = mc.getProperty('uri.var.jsonString');
   			var urlQuery = mc.getProperty('uri.var.urlQuery');
   			
   			urlQuery += '&JSONString=' + encodeURIComponent(jsonString);
   			mc.setProperty('uri.var.urlQuery', urlQuery);
            ]]>
      </script>
      <call>
         <endpoint>
            <http method="post" uri-template="legacy-encoding:{uri.var.apiUrl}/estimates{uri.var.urlQuery}" />
         </endpoint>
      </call>
      <!--Removing custom headers from the Response. -->
      <header name="X-Rate-Limit-Limit" action="remove" scope="transport" />
      <header name="X-XSS-Protection" action="remove" scope="transport" />
      <header name="X-Rate-Limit-Remaining" action="remove" scope="transport" />
      <header name="Cache-Control" action="remove" scope="transport" />
      <header name="Pragma" action="remove" scope="transport" />
      <header name="X-Content-Type-Options" action="remove" scope="transport" />
      <header name="BUILD_VERSION" action="remove" scope="transport" />
      <header name="Strict-Transport-Security" action="remove" scope="transport" />
      <header name="Vary" action="remove" scope="transport" />
      <header name="Content-Disposition" action="remove" scope="transport" />
      <header name="X-Rate-Limit-Reset" action="remove" scope="transport" />
      <header name="Status" action="remove" scope="transport" />
   </sequence>
</template>