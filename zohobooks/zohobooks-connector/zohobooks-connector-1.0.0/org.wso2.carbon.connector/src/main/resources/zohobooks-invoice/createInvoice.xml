<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied. See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<template name="createInvoice" xmlns="http://ws.apache.org/ns/synapse">
   <!-- API Documentation URL - https://www.zoho.com/books/api/v3/invoices/#create-an-invoice -->
   <parameter name="customerId" description="ID of the customer the invoice has to be created." />
   <parameter name="contactPersons" description="Array of contact person(s) for whom invoice has to be sent." />
   <parameter name="invoiceNumber" description="Mandatory if auto number generation is disabled." />
   <parameter name="referenceNumber" description="Reference No. of the invoice." />
   <parameter name="templateId" description="ID of the pdf template associated with the invoice." />
   <parameter name="date" description="The date the invoice is created." />
   <parameter name="paymentTerms" description="Payment terms in days e.g. 15, 30, 60. Invoice due date will be calculated based on this." />
   <parameter name="paymentTermsLabel" description="Used to override the default payment terms label." />
   <parameter name="dueDate" description="Date invoice is due." />
   <parameter name="discount" description="Discount applied to the invoice. It can be either in % or in amount. e.g. 12.5% or 190." />
   <parameter name="isDiscountBeforeTax"
      description="Used to specify how the discount has to applied. Either before or after the calculation of tax." />
   <parameter name="discountType"
      description="How the discount is specified. Allowed values are entity_level or item_level. Allowed Values: entity_level and item_level." />
   <parameter name="exchangeRate" description="Exchange rate of the currency." />
   <parameter name="recurringInvoiceId" description="ID of the recurring invoice from which the invoice is created." />
   <parameter name="invoicedEstimateId" description="ID of the estimate from which the invoice is created." />
   <parameter name="salespersonName" description="Name of the sales person." />
   <parameter name="customFields" description="Custom fields for an invoice." />
   <parameter name="lineItems" description="Line items of an invoice." />
   <parameter name="allowPartialPayments" description="Can the payment be made partially for this invoice." />
   <parameter name="customBody" description="Custom Body for the Invoice." />
   <parameter name="customSubject" description="Custom subject for the Invoice." />
   <parameter name="notes" description="Notes to be added to the Invoice." />
   <parameter name="terms" description="Terms and conditions applicable to the Invoice." />
   <parameter name="shippingCharge" description="Shipping charges applied to the invoice." />
   <parameter name="adjustment" description="Adjustments made to the invoice." />
   <parameter name="adjustmentDescription" description="Customize the adjustment description. E.g. Rounding off." />
   <parameter name="timeEntryIds" description="IDs of the time entries associated with the project." />
   <parameter name="paymentOptions" description="Payment options for the invoice, online payment gateways. Will be displayed in the pdf." />
   <parameter name="taxId" description="ID of the tax or tax group applied to the line item." />
   <parameter name="taxAuthorityId"
      description="ID of the tax authority. Tax authority depends on the location of the customer. For example, if the customer is located in NY, then the tax authority is NY tax authority." />
   <parameter name="taxExemptionId" description="ID of the tax exemption." />
   <parameter name="avataxUseCode"
      description="Used to group like customers for exemption purposes. It is a custom value that links customers to a tax rule." />
   <parameter name="avataxExemptNo" description="Exemption certificate number of the customer." />
   <parameter name="vatTreatment"
      description="VAT treatment for the invoice. VAT treatment denotes the location of the customer, if the customer resides in UK then the VAT treatment is uk." />
   <parameter name="send"
      description="Send the invoice to the contact person(s) associated with the invoice. Allowed Values: true and false" />
   <parameter name="ignoreAutoNumberGeneration"
      description="Ignore auto invoice number generation for this invoice. This mandates the invoice number. Allowed Values: true and false" />
   <sequence>
      <property name="uri.var.customerId" expression="$func:customerId" />
      <property name="uri.var.contactPersons" expression="$func:contactPersons" />
      <property name="uri.var.invoiceNumber" expression="$func:invoiceNumber" />
      <property name="uri.var.referenceNumber" expression="$func:referenceNumber" />
      <property name="uri.var.templateId" expression="$func:templateId" />
      <property name="uri.var.date" expression="$func:date" />
      <property name="uri.var.paymentTerms" expression="$func:paymentTerms" />
      <property name="uri.var.paymentTermsLabel" expression="$func:paymentTermsLabel" />
      <property name="uri.var.dueDate" expression="$func:dueDate" />
      <property name="uri.var.discount" expression="$func:discount" />
      <property name="uri.var.isDiscountBeforeTax" expression="$func:isDiscountBeforeTax" />
      <property name="uri.var.discountType" expression="$func:discountType" />
      <property name="uri.var.exchangeRate" expression="$func:exchangeRate" />
      <property name="uri.var.recurringInvoiceId" expression="$func:recurringInvoiceId" />
      <property name="uri.var.invoicedEstimateId" expression="$func:invoicedEstimateId" />
      <property name="uri.var.salespersonName" expression="$func:salespersonName" />
      <property name="uri.var.customFields" expression="$func:customFields" />
      <property name="uri.var.lineItems" expression="$func:lineItems" />
      <property name="uri.var.allowPartialPayments" expression="$func:allowPartialPayments" />
      <property name="uri.var.customBody" expression="$func:customBody" />
      <property name="uri.var.customSubject" expression="$func:customSubject" />
      <property name="uri.var.notes" expression="$func:notes" />
      <property name="uri.var.terms" expression="$func:terms" />
      <property name="uri.var.shippingCharge" expression="$func:shippingCharge" />
      <property name="uri.var.adjustment" expression="$func:adjustment" />
      <property name="uri.var.adjustmentDescription" expression="$func:adjustmentDescription" />
      <property name="uri.var.timeEntryIds" expression="$func:timeEntryIds" />
      <property name="uri.var.paymentOptions" expression="$func:paymentOptions" />
      <property name="uri.var.taxId" expression="$func:taxId" />
      <property name="uri.var.taxAuthorityId" expression="$func:taxAuthorityId" />
      <property name="uri.var.taxExemptionId" expression="$func:taxExemptionId" />
      <property name="uri.var.avataxUseCode" expression="$func:avataxUseCode" />
      <property name="uri.var.avataxExemptNo" expression="$func:avataxExemptNo" />
      <property name="uri.var.vatTreatment" expression="$func:vatTreatment" />
      <property name="uri.var.send" expression="$func:send" />
      <property name="uri.var.ignoreAutoNumberGeneration" expression="$func:ignoreAutoNumberGeneration" />

      <payloadFactory media-type="json">
         <format>
            {"customer_id": "$1"}
         </format>
         <args>
            <arg expression="get-property('uri.var.customerId')" />
         </args>
      </payloadFactory>

      <script language="js">
         <![CDATA[
            var jsonPayload = mc.getPayloadJSON();
            
            var adjustment = mc.getProperty('uri.var.adjustment');
            var adjustmentDescription = mc.getProperty('uri.var.adjustmentDescription');
            var allowPartialPayments = mc.getProperty('uri.var.allowPartialPayments');
            var avataxExemptNo = mc.getProperty('uri.var.avataxExemptNo');
            var avataxUseCode = mc.getProperty('uri.var.avataxUseCode');
            var contactPersons = mc.getProperty('uri.var.contactPersons');
            var customBody = mc.getProperty('uri.var.customBody');
            var customFields = mc.getProperty('uri.var.customFields');
            var customSubject = mc.getProperty('uri.var.customSubject');
            var date = mc.getProperty('uri.var.date');
            var discount = mc.getProperty('uri.var.discount');
            var discountType = mc.getProperty('uri.var.discountType');
            var dueDate = mc.getProperty('uri.var.dueDate');
            var exchangeRate = mc.getProperty('uri.var.exchangeRate');
            var ignoreAutoNumberGeneration = mc.getProperty('uri.var.ignoreAutoNumberGeneration');
            var invoiceNumber = mc.getProperty('uri.var.invoiceNumber');
            var referenceNumber = mc.getProperty('uri.var.referenceNumber');
            var invoicedEstimateId = mc.getProperty('uri.var.invoicedEstimateId');
            var isDiscountBeforeTax = mc.getProperty('uri.var.isDiscountBeforeTax');
            var lineItems = mc.getProperty('uri.var.lineItems');
            var notes = mc.getProperty('uri.var.notes');
            var paymentOptions = mc.getProperty('uri.var.paymentOptions');
            var paymentTerms = mc.getProperty('uri.var.paymentTerms');
            var paymentTermsLabel = mc.getProperty('uri.var.paymentTermsLabel');
            var recurringInvoiceId = mc.getProperty('uri.var.recurringInvoiceId');
            var salespersonName = mc.getProperty('uri.var.salespersonName');
            var send = mc.getProperty('uri.var.send');
            var shippingCharge = mc.getProperty('uri.var.shippingCharge');
            var taxAuthorityId = mc.getProperty('uri.var.taxAuthorityId');
            var taxExemptionId = mc.getProperty('uri.var.taxExemptionId');
            var taxId = mc.getProperty('uri.var.taxId');
            var templateId = mc.getProperty('uri.var.templateId');
            var terms = mc.getProperty('uri.var.terms');
            var timeEntryIds = mc.getProperty('uri.var.timeEntryIds');
            var vatTreatment = mc.getProperty('uri.var.vatTreatment');
            var authToken = mc.getProperty('uri.var.authToken');
            var organizationId = mc.getProperty('uri.var.organizationId');
            
            var urlQuery = '?authtoken=' + authToken + '&organization_id=' + organizationId + '&';
            
            if (ignoreAutoNumberGeneration != null && ignoreAutoNumberGeneration != ""){
               urlQuery += 'ignore_auto_number_generation=' + ignoreAutoNumberGeneration + '&';
            }
            
            if (send != null && send != ""){
               urlQuery += 'send=' + send + '&';
            }
            
            // Remove the trailing '&'
            urlQuery = urlQuery.substring(0, urlQuery.length - 1);
            mc.setProperty('uri.var.urlQuery', urlQuery);
            
            if (adjustment != null && adjustment != ""){
               jsonPayload["adjustment"] = adjustment;
            }
            
            if (adjustmentDescription != null && adjustmentDescription != ""){
               jsonPayload["adjustment_description"] = adjustmentDescription;
            }
            
            if (allowPartialPayments != null && allowPartialPayments != ""){
               jsonPayload["allow_partial_payments"] = allowPartialPayments;
            }
            
            if (avataxExemptNo != null && avataxExemptNo != ""){
               jsonPayload["avatax_exempt_no"] = avataxExemptNo;
            }
            
            if (avataxUseCode != null && avataxUseCode != ""){
               jsonPayload["avatax_use_code"] = avataxUseCode;
            }
            
            if (contactPersons != null && contactPersons != ""){
               jsonPayload["contact_persons"] = eval("(" + contactPersons + ")");
            }
            
            if (customBody != null && customBody != ""){
               jsonPayload["custom_body"] = customBody;
            }
            
            if (customFields != null && customFields != ""){
               jsonPayload["custom_fields"] = eval("(" + customFields + ")");
            }
            
            if (customSubject != null && customSubject != ""){
               jsonPayload["custom_subject"] = customSubject;
            }
            
            if (date != null && date != ""){
               jsonPayload["date"] = date;
            }
            
            if (discount != null && discount != ""){
               jsonPayload["discount"] = discount;
            }
            
            if (discountType != null && discountType != ""){
               jsonPayload["discount_type"] = discountType;
            }
            
            if (dueDate != null && dueDate != ""){
               jsonPayload["due_date"] = dueDate;
            }
            
            if (exchangeRate != null && exchangeRate != ""){
               jsonPayload["exchange_rate"] = exchangeRate;
            }
            
            if (invoiceNumber != null && invoiceNumber != ""){
               jsonPayload["invoice_number"] = invoiceNumber;
            }
            
            if (referenceNumber != null && referenceNumber != ""){
               jsonPayload["reference_number"] = referenceNumber;
            }
            
            if (invoicedEstimateId != null && invoicedEstimateId != ""){
               jsonPayload["invoiced_estimate_id"] = invoicedEstimateId;
            }
            
            if (isDiscountBeforeTax != null && isDiscountBeforeTax != ""){
               jsonPayload["is_discount_before_tax"] = isDiscountBeforeTax;
            }
            
            if (lineItems != null && lineItems != ""){
               jsonPayload["line_items"] = eval("(" + lineItems + ")");
            }
            
            if (notes != null && notes != ""){
               jsonPayload["notes"] = notes;
            }
            
            if (paymentOptions != null && paymentOptions != ""){
               jsonPayload["payment_options"] = eval("(" + paymentOptions + ")");
            }
            
            if (paymentTerms != null && paymentTerms != ""){
               jsonPayload["payment_terms"] = paymentTerms;
            }
            
            if (paymentTermsLabel != null && paymentTermsLabel != ""){
               jsonPayload["payment_terms_label"] = paymentTermsLabel;
            }
            
            if (recurringInvoiceId != null && recurringInvoiceId != ""){
               jsonPayload["recurring_invoice_id"] = recurringInvoiceId;
            }
            
            if (salespersonName != null && salespersonName != ""){
               jsonPayload["salesperson_name"] = salespersonName;
            }
            
            if (shippingCharge != null && shippingCharge != ""){
               jsonPayload["shipping_charge"] = shippingCharge;
            }
            
            if (taxAuthorityId != null && taxAuthorityId != ""){
               jsonPayload["tax_authority_id"] = taxAuthorityId;
            }
            
            if (taxExemptionId != null && taxExemptionId != ""){
               jsonPayload["tax_exemption_id"] = taxExemptionId;
            }
            
            if (taxId != null && taxId != ""){
               jsonPayload["tax_id"] = taxId;
            }
            
            if (templateId != null && templateId != ""){
               jsonPayload["template_id"] = templateId;
            }
            
            if (terms != null && terms != ""){
               jsonPayload["terms"] = terms;
            }
            
            if (timeEntryIds != null && timeEntryIds != ""){
               jsonPayload["time_entry_ids"] = eval("(" + timeEntryIds + ")");
            }
            
            if (vatTreatment != null && vatTreatment != ""){
               jsonPayload["vat_treatment"] = vatTreatment;
            }
            
            mc.setPayloadJSON(jsonPayload);
         ]]>
      </script>

      <!--Extract the JSON object to a Property. -->
      <property name="uri.var.jsonString" expression="json-eval($)" />

      <!--This script mediator is used for the purpose of URL encoding the JSON Object that was built in the Script Mediator 
         above. -->
      <script language="js">
         <![CDATA[
			var jsonString = mc.getProperty('uri.var.jsonString');
			var urlQuery = mc.getProperty('uri.var.urlQuery');
			
			urlQuery += '&JSONString=' + encodeURIComponent(jsonString);
			mc.setProperty('uri.var.urlQuery', urlQuery);
         ]]>
      </script>

      <call>
         <endpoint>
            <http method="post" uri-template="legacy-encoding:{uri.var.apiUrl}/invoices{uri.var.urlQuery}" />
         </endpoint>
      </call>

      <!--Removing custom headers from the Response. -->
      <header name="X-Rate-Limit-Limit" action="remove" scope="transport" />
      <header name="X-XSS-Protection" action="remove" scope="transport" />
      <header name="X-Rate-Limit-Remaining" action="remove" scope="transport" />
      <header name="Cache-Control" action="remove" scope="transport" />
      <header name="Pragma" action="remove" scope="transport" />
      <header name="X-Content-Type-Options" action="remove" scope="transport" />
      <header name="BUILD_VERSION" action="remove" scope="transport" />
      <header name="Strict-Transport-Security" action="remove" scope="transport" />
      <header name="Vary" action="remove" scope="transport" />
      <header name="Content-Disposition" action="remove" scope="transport" />
      <header name="X-Rate-Limit-Reset" action="remove" scope="transport" />
      <header name="Status" action="remove" scope="transport" />

   </sequence>
</template>