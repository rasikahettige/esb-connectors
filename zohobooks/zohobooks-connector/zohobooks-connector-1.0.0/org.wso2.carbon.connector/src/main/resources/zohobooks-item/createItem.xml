<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied. See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<template name="createItem" xmlns="http://ws.apache.org/ns/synapse">
   <!-- API Documentation URL - https://www.zoho.com/books/api/v3/settings/items/#create-an-item -->
   <parameter name="itemName" description="Name of the item." />
   <parameter name="description" description="Description for the item." />
   <parameter name="accountId" description="ID of the account to which the item has to be associated with." />
   <parameter name="taxId" description="ID of the tax to be associated to the item (Not applicable for the US Edition)." />
   <parameter name="isTaxable" description="Boolean to track the taxability of the item (US Edition only)." />
   <parameter name="taxExemptionId" description="ID of the tax exemption. Mandatory, if is_taxable is false (US Edition only)." />
   <parameter name="avataxTaxCode"
      description="A tax code is a unique label used to group Items (products, services, or charges) together (Avalara integration only)." />
   <parameter name="avataxUseCode"
      description="Used to group like customers for exemption purposes. It is a custom value that links customers to a tax rule (Avalara integration only)." />
   <parameter name="productType"
      description="Product type of an item. Items with type digital_service are treated as a service except for the cases where non-UK VAT is applied to the digital_service items (UK Edition only)." />
   <parameter name="itemType"
      description="Type of the item. Allowed values sales,purchases,sales_and_purchases and inventory. Default value will be sales." />
   <parameter name="purchaseRate"
      description="Purchase price of the item (Mandatory, if item_type is purchase / sales and purchase / inventory)." />
   <parameter name="purchaseAccountId"
      description="ID of the COGS account to which the item has to be associated with (Mandatory, if item_type is purchase / sales and purchase / inventory)." />
   <parameter name="inventoryAccountId"
      description="ID of the stock account to which the item has to be associated with (Mandatory, if item_type is inventory)." />
   <parameter name="vendorId" description="Preferred vendor ID." />
   <parameter name="reorderLevel" description="Reorder level of the item." />
   <parameter name="initialStock" description="Opening stock of the item." />
   <parameter name="initialStockRate" description="Unit price of the opening stock." />
   <parameter name="purchaseDescription" description="purchaseDescription of the Item." />
   <parameter name="rate" description="Price of the item." />
   <parameter name="unit" description="Unit to measure the quantity of the item" />
   <parameter name="taxPercentage" description="Percentage of tax to be added to the item." />
   <parameter name="purchaseAccountName" description="Name of the purchase account " />
   <sequence>
      <property name="uri.var.itemName" expression="$func:itemName" />
      <property name="uri.var.description" expression="$func:description" />
      <property name="uri.var.accountId" expression="$func:accountId" />
      <property name="uri.var.taxId" expression="$func:taxId" />
      <property name="uri.var.isTaxable" expression="$func:isTaxable" />
      <property name="uri.var.taxExemptionId" expression="$func:taxExemptionId" />
      <property name="uri.var.avataxTaxCode" expression="$func:avataxTaxCode" />
      <property name="uri.var.avataxUseCode" expression="$func:avataxUseCode" />
      <property name="uri.var.productType" expression="$func:productType" />
      <property name="uri.var.itemType" expression="$func:itemType" />
      <property name="uri.var.purchaseRate" expression="$func:purchaseRate" />
      <property name="uri.var.purchaseAccountId" expression="$func:purchaseAccountId" />
      <property name="uri.var.inventoryAccountId" expression="$func:inventoryAccountId" />
      <property name="uri.var.vendorId" expression="$func:vendorId" />
      <property name="uri.var.reorderLevel" expression="$func:reorderLevel" />
      <property name="uri.var.initialStock" expression="$func:initialStock" />
      <property name="uri.var.initialStockRate" expression="$func:initialStockRate" />
      <property name="uri.var.purchaseDescription" expression="$func:purchaseDescription" />
      <property name="uri.var.rate" expression="$func:rate" />
      <property name="uri.var.unit" expression="$func:unit" />
      <property name="uri.var.taxPercentage" expression="$func:taxPercentage" />
      <property name="uri.var.purchaseAccountName" expression="$func:purchaseAccountName" />

      <payloadFactory media-type="json">
         <format>
            {
            "rate": "$1",
            "name": "$2"
            }
         </format>
         <args>
            <arg expression="get-property('uri.var.rate')" />
            <arg expression="get-property('uri.var.itemName')" />
         </args>
      </payloadFactory>

      <script language="js">
         <![CDATA[
            var jsonPayload = mc.getPayloadJSON();
            
            var accountId = mc.getProperty('uri.var.accountId');
            var authToken = mc.getProperty('uri.var.authToken');
            var avataxTaxCode = mc.getProperty('uri.var.avataxTaxCode');
            var avataxUseCode = mc.getProperty('uri.var.avataxUseCode');
            var description = mc.getProperty('uri.var.description');
            var initialStock = mc.getProperty('uri.var.initialStock');
            var initialStockRate = mc.getProperty('uri.var.initialStockRate');
            var inventoryAccountId = mc.getProperty('uri.var.inventoryAccountId');
            var isTaxable = mc.getProperty('uri.var.isTaxable');
            var itemType = mc.getProperty('uri.var.itemType');
            var organizationId = mc.getProperty('uri.var.organizationId');
            var productType = mc.getProperty('uri.var.productType');
            var purchaseAccountId = mc.getProperty('uri.var.purchaseAccountId');
            var purchaseDescription = mc.getProperty('uri.var.purchaseDescription');
            var purchaseRate = mc.getProperty('uri.var.purchaseRate');
            var reorderLevel = mc.getProperty('uri.var.reorderLevel');
            var taxExemptionId = mc.getProperty('uri.var.taxExemptionId');
            var taxId = mc.getProperty('uri.var.taxId');
            var vendorId = mc.getProperty('uri.var.vendorId');
            var unit = mc.getProperty('uri.var.unit');
            var taxPercentage = mc.getProperty('uri.var.taxPercentage');
            var purchaseAccountName = mc.getProperty('uri.var.purchaseAccountName');
            
            var urlQuery = '?authtoken=' + authToken + '&organization_id=' + organizationId;
            mc.setProperty('uri.var.urlQuery', urlQuery);
            
            if (accountId != null && accountId != ""){
               jsonPayload["account_id"] = accountId;
            }
            
            if (avataxTaxCode != null && avataxTaxCode != ""){
               jsonPayload["avatax_tax_code"] = avataxTaxCode;
            }
            
            if (avataxUseCode != null && avataxUseCode != ""){
               jsonPayload["avatax_use_code"] = avataxUseCode;
            }
            
            if (description != null && description != ""){
               jsonPayload["description"] = description;
            }
            
            if (initialStock != null && initialStock != ""){
               jsonPayload["initial_stock"] = initialStock;
            }
            
            if (initialStockRate != null && initialStockRate != ""){
               jsonPayload["initial_stock_rate"] = initialStockRate;
            }
            
            if (inventoryAccountId != null && inventoryAccountId != ""){
               jsonPayload["inventory_account_id"] = inventoryAccountId;
            }
            
            if (isTaxable != null && isTaxable != ""){
               jsonPayload["is_taxable"] = isTaxable;
            }
            
            if (itemType != null && itemType != ""){
               jsonPayload["item_type"] = itemType;
            }
            
            if (productType != null && productType != ""){
               jsonPayload["product_type"] = productType;
            }
            
            if (purchaseAccountId != null && purchaseAccountId != ""){
               jsonPayload["purchase_account_id"] = purchaseAccountId;
            }
            
            if (purchaseDescription != null && purchaseDescription != ""){
               jsonPayload["purchase_description"] = purchaseDescription;
            }
            
            if (purchaseRate != null && purchaseRate != ""){
               jsonPayload["purchase_rate"] = purchaseRate;
            }
            
            if (reorderLevel != null && reorderLevel != ""){
               jsonPayload["reorder_level"] = reorderLevel;
            }
            
            if (taxExemptionId != null && taxExemptionId != ""){
               jsonPayload["tax_exemption_id"] = taxExemptionId;
            }
            
            if (taxId != null && taxId != ""){
               jsonPayload["tax_id"] = taxId;
            }
            
            if (vendorId != null && vendorId != ""){
               jsonPayload["vendor_id"] = vendorId;
            }
            
            if (unit != null && unit != ""){
               jsonPayload["unit"] = unit;
            }
            
            if (taxPercentage != null && taxPercentage != ""){
               jsonPayload["tax_percentage"] = taxPercentage;
            }
            
            if (purchaseAccountName != null && purchaseAccountName != ""){
               jsonPayload["purchase_account_name"] = purchaseAccountName;
            }
            
            mc.setPayloadJSON(jsonPayload);
         ]]>
      </script>

      <!--Extract the JSON object to a Property. -->
      <property name="uri.var.jsonString" expression="json-eval($)" />

      <!--This script mediator is used for the purpose of URL encoding the JSON Object that was built in the Script Mediator 
         above. -->
      <script language="js">
         <![CDATA[
			var jsonString = mc.getProperty('uri.var.jsonString');
			var urlQuery = mc.getProperty('uri.var.urlQuery');
			
			urlQuery += '&JSONString=' + encodeURIComponent(jsonString);
			mc.setProperty('uri.var.urlQuery', urlQuery);
         ]]>
      </script>

      <call>
         <endpoint>
            <http method="post" uri-template="legacy-encoding:{uri.var.apiUrl}/items{uri.var.urlQuery}" />
         </endpoint>
      </call>

	  <!--Removing custom headers from the Response.-->
      <header name="X-Rate-Limit-Limit" action="remove" scope="transport" />
      <header name="X-XSS-Protection" action="remove" scope="transport" />
      <header name="X-Rate-Limit-Remaining" action="remove" scope="transport" />
      <header name="Cache-Control" action="remove" scope="transport" />
      <header name="Pragma" action="remove" scope="transport" />
      <header name="X-Content-Type-Options" action="remove" scope="transport" />
      <header name="BUILD_VERSION" action="remove" scope="transport" />
      <header name="Strict-Transport-Security" action="remove" scope="transport" />
      <header name="Vary" action="remove" scope="transport" />
      <header name="Content-Disposition" action="remove" scope="transport" />
      <header name="X-Rate-Limit-Reset" action="remove" scope="transport" />
      <header name="Status" action="remove" scope="transport" />

   </sequence>
</template>