<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied. See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<template name="listItems" xmlns="http://ws.apache.org/ns/synapse">
   <!-- API Documentation URL - https://www.zoho.com/books/api/v3/settings/items/#list-items -->
   <parameter name="sortColumn"
      description="Sort contacts. Allowed Values: contact_name, first_name, last_name, email, outstanding_receivable_amount, outstanding_payable_amount, created_time and last_modified_time" />
   <parameter name="searchText" description="Search contacts by contact name or notes." />
   <parameter name="filterBy"
      description="Filter contacts by status. Allowed Values: Status.All, Status.Active, Status.Inactive, Status.Duplicate, Status.Customers, Status.Vendors and Status." />
   <parameter name="taxName" description="Name of the tax to be associated." />
   <parameter name="taxId"
      description="ID of the tax or tax group that can be collected from the contact. Tax can be given only if is_taxable is true (US Edition only)." />
   <parameter name="name" description="Search items by name." />
   <parameter name="nameStartsWith" description="Search items by name." />
   <parameter name="nameContains" description="Search items by name." />
   <parameter name="rate" description="Search items by rate." />
   <parameter name="rateLessThan" description="Search items by rate." />
   <parameter name="rateLessEquals" description="Search items by rate." />
   <parameter name="rateGreaterEquals" description="Search items by rate." />
   <parameter name="accountId" description="Search items by account id." />
   <parameter name="taxExemptionId" description="ID of the tax exemption (US Edition only)." />
   <parameter name="isTaxable" description="Boolean to track the taxability of the customer (US Edition only)." />
   <parameter name="description" description="Search items by description." />
   <parameter name="descriptionStartsWith" description="Search items by description." />
   <parameter name="descriptionContains" description="Search items by description." />
   <parameter name="rateGreaterThan" description="Search items by rate." />
   <parameter name="page" description="No. of page to be returned - Pagination value." />
   <parameter name="perPage" description="Specifies how mny entried should be returned in the response." />
   <parameter name="appliedFilter" description="Filters to be applied while querying." />
   <parameter name="sortOrder" description="Order of sorting - Ascending or Descending" />
   <sequence>
      <property name="uri.var.page" expression="$func:page" />
      <property name="uri.var.appliedFilter" expression="$func:appliedFilter" />
      <property name="uri.var.perPage" expression="$func:perPage" />
      <property name="uri.var.sortOrder" expression="$func:sortOrder" />
      <property name="uri.var.sortColumn" expression="$func:sortColumn" />
      <property name="uri.var.searchText" expression="$func:searchText" />
      <property name="uri.var.filterBy" expression="$func:filterBy" />
      <property name="uri.var.taxName" expression="$func:taxName" />
      <property name="uri.var.taxId" expression="$func:taxId" />
      <property name="uri.var.name" expression="$func:name" />
      <property name="uri.var.nameStartsWith" expression="$func:nameStartsWith" />
      <property name="uri.var.nameContains" expression="$func:nameContains" />
      <property name="uri.var.rate" expression="$func:rate" />
      <property name="uri.var.rateLessThan" expression="$func:rateLessThan" />
      <property name="uri.var.rateLessEquals" expression="$func:rateLessEquals" />
      <property name="uri.var.rateGreaterEquals" expression="$func:rateGreaterEquals" />
      <property name="uri.var.accountId" expression="$func:accountId" />
      <property name="uri.var.taxExemptionId" expression="$func:taxExemptionId" />
      <property name="uri.var.isTaxable" expression="$func:isTaxable" />
      <property name="uri.var.description" expression="$func:description" />
      <property name="uri.var.descriptionStartsWith" expression="$func:descriptionStartsWith" />
      <property name="uri.var.descriptionContains" expression="$func:descriptionContains" />
      <property name="uri.var.rateGreaterThan" expression="$func:rateGreaterThan" />

      <script language="js">
         <![CDATA[
            var page = mc.getProperty('uri.var.page');
            var appliedFilter = mc.getProperty('uri.var.appliedFilter');
            var perPage = mc.getProperty('uri.var.perPage');
            var sortOrder = mc.getProperty('uri.var.sortOrder');
            var accountId = mc.getProperty('uri.var.accountId');
            var authToken = mc.getProperty('uri.var.authToken');
            var description = mc.getProperty('uri.var.description');
            var descriptionContains = mc.getProperty('uri.var.descriptionContains');
            var descriptionStartsWith = mc.getProperty('uri.var.descriptionStartsWith');
            var filterBy = mc.getProperty('uri.var.filterBy');
            var isTaxable = mc.getProperty('uri.var.isTaxable');
            var name = mc.getProperty('uri.var.name');
            var nameContains = mc.getProperty('uri.var.nameContains');
            var nameStartsWith = mc.getProperty('uri.var.nameStartsWith');
            var rate = mc.getProperty('uri.var.rate');
            var rateGreaterEquals = mc.getProperty('uri.var.rateGreaterEquals');
            var rateGreaterThan = mc.getProperty('uri.var.rateGreaterThan');
            var rateLessEquals = mc.getProperty('uri.var.rateLessEquals');
            var rateLessThan = mc.getProperty('uri.var.rateLessThan');
            var searchText = mc.getProperty('uri.var.searchText');
            var sortColumn = mc.getProperty('uri.var.sortColumn');
            var taxExemptionId = mc.getProperty('uri.var.taxExemptionId');
            var taxId = mc.getProperty('uri.var.taxId');
            var taxName = mc.getProperty('uri.var.taxName');
            var organizationId = mc.getProperty('uri.var.organizationId');
            
            var urlQuery = '?authtoken=' + authToken + '&organization_id=' + organizationId + '&';
            
            if (accountId != null && accountId != ""){
               urlQuery += 'account_id=' + accountId + '&';
            }
            
            if (description != null && description != ""){
               urlQuery += 'description=' + description + '&';
            }
            
            if (descriptionContains != null && descriptionContains != ""){
               urlQuery += 'description_contains=' + descriptionContains + '&';
            }
            
            if (descriptionStartsWith != null && descriptionStartsWith != ""){
               urlQuery += 'description_startswith=' + descriptionStartsWith + '&';
            }
            
            if (filterBy != null && filterBy != ""){
               urlQuery += 'filter_by=' + filterBy + '&';
            }
            
            if (isTaxable != null && isTaxable != ""){
               urlQuery += 'is_taxable=' + isTaxable + '&';
            }
            
            if (name != null && name != ""){
               urlQuery += 'name=' + name + '&';
            }
            
            if (nameContains != null && nameContains != ""){
               urlQuery += 'name_contains=' + nameContains + '&';
            }
            
            if (nameStartsWith != null && nameStartsWith != ""){
               urlQuery += 'name_startswith=' + nameStartsWith + '&';
            }
            
            if (rate != null && rate != ""){
               urlQuery += 'rate=' + rate + '&';
            }
            
            if (rateGreaterEquals != null && rateGreaterEquals != ""){
               urlQuery += 'rate_greater_equals=' + rateGreaterEquals + '&';
            }
            
            if (rateGreaterThan != null && rateGreaterThan != ""){
               urlQuery += 'rate_greater_than=' + rateGreaterThan + '&';
            }
            
            if (rateLessEquals != null && rateLessEquals != ""){
               urlQuery += 'rate_less_equals=' + rateLessEquals + '&';
            }
            
            if (rateLessThan != null && rateLessThan != ""){
               urlQuery += 'rate_less_than=' + rateLessThan + '&';
            }
            
            if (searchText != null && searchText != ""){
               urlQuery += 'search_text=' + searchText + '&';
            }
            
            if (sortColumn != null && sortColumn != ""){
               urlQuery += 'sort_column=' + sortColumn + '&';
            }
            
            if (taxExemptionId != null && taxExemptionId != ""){
               urlQuery += 'tax_exemption_id=' + taxExemptionId + '&';
            }
            
            if (taxId != null && taxId != ""){
               urlQuery += 'tax_id=' + taxId + '&';
            }
            
            if (taxName != null && taxName != ""){
               urlQuery += 'tax_name=' + taxName + '&';
            }
            
            if (page != null && page != ""){
               urlQuery += 'page=' + page + '&';
            }
            
            if (perPage != null && perPage != ""){
               urlQuery += 'per_page=' + perPage + '&';
            }
            
            if (appliedFilter != null && appliedFilter != ""){
               urlQuery += 'applied_filter=' + appliedFilter + '&';
            }
            
            if (sortOrder != null && sortOrder != ""){
               urlQuery += 'sort_order=' + sortOrder + '&';
            }
            
            // Remove the trailing '&'
            urlQuery = urlQuery.substring(0, urlQuery.length - 1);
            mc.setProperty('uri.var.urlQuery', encodeURI(urlQuery));
            
         ]]>
      </script>

      <call>
         <endpoint>
            <http method="get" uri-template="legacy-encoding:{uri.var.apiUrl}/items{uri.var.urlQuery}" />
         </endpoint>
      </call>

	  <!--Removing custom headers from the Response.-->
      <header name="X-Rate-Limit-Limit" action="remove" scope="transport" />
      <header name="X-XSS-Protection" action="remove" scope="transport" />
      <header name="X-Rate-Limit-Remaining" action="remove" scope="transport" />
      <header name="Cache-Control" action="remove" scope="transport" />
      <header name="Pragma" action="remove" scope="transport" />
      <header name="X-Content-Type-Options" action="remove" scope="transport" />
      <header name="BUILD_VERSION" action="remove" scope="transport" />
      <header name="Strict-Transport-Security" action="remove" scope="transport" />
      <header name="Vary" action="remove" scope="transport" />
      <header name="Content-Disposition" action="remove" scope="transport" />
      <header name="X-Rate-Limit-Reset" action="remove" scope="transport" />
      <header name="Status" action="remove" scope="transport" />

   </sequence>
</template>
