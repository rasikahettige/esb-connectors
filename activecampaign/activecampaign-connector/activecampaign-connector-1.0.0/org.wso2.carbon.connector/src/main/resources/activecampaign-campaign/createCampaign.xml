<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<!-- API Doc: http://www.activecampaign.com/api/example.php?call=campaign_create -->
<template name="createCampaign" xmlns="http://ws.apache.org/ns/synapse">
   <parameter name="type" description="The type of the campaign." />
   <parameter name="segmentId" description="The list segment Id." />
   <parameter name="name" description="The internal campaign name." />
   <parameter name="sdate" description="The date when the campaign should be sent out." />
   <parameter name="isStatusScheduled" description="The status of the campaign." />
   <parameter name="isPublic" description="The visibility of the campaign to the public side." />
   <parameter name="trackLinks" description="The type of the links that should be tracked." />
   <parameter name="isTrackLinksAnalyticsEnabled" 
      description="The value to check whether or not to use the lists' Google Analytics settings." />
   <parameter name="isTrackReadsEnabled" description="The value to check whether or not to track reads." />
   <parameter name="isTrackRepliesEnabled" description="The value to check whether or not to track replies." />
   <parameter name="analyticsCampaignName" description="The name of this campaign to use in Google Analytics." />
   <parameter name="isTweetEnabled" description="The value to check whether or not to use lists' Twitter settings." />
   <parameter name="isFacebookEnabled" description="The value to check whether or not to use lists' Facebook  settings." />
   <parameter name="isHtmlUnsubEnabled" 
      description="The value to check whether or not to append unsubscribe link to the bottom of HTML body." />
   <parameter name="isTextUnsubEnabled" 
      description="The value to check whether or not to append unsubscribe link to the bottom of TEXT  body." />
   <parameter name="htmlUnsubData" description="The custom unsubscribe link." />
   <parameter name="textUnsubData" description="The custom unsubscribe link." />
   <parameter name="recurring" description="The value for recurring mailing." />
   <parameter name="splitType" description="The type of the split mailing." />
   <parameter name="splitOffset" description="The value for waiting in split mailing." />
   <parameter name="splitOffsetType" description="The type for waiting in split mailing." />
   <parameter name="responderOffset" description="The value for waiting in auto responding." />
   <parameter name="responderType" description="The type for auto responder. After what it should be sent." />
   <parameter name="reminderField" description="The contact field to use in auto reminder." />
   <parameter name="reminderFormat" description="The format in which the date is represented in contact field." />
   <parameter name="reminderType" description="The type for auto reminder." />
   <parameter name="reminderOffset" description="The value for triggering the auto reminder." />
   <parameter name="reminderOffsetType" description="The type of the auto reminder." />
   <parameter name="reminderOffsetSign" description="The sign for the reminder Offset which it shoud be differ." />
   <parameter name="activerssInterval" description="The value for ActiveRSS." />
   <parameter name="linkUrlList" description="The list of link URLs to track." />
   <parameter name="linkNameList" description="The list of link names to track." />
   <parameter name="linkMessageList" description="The list of link messages to track." />
   <parameter name="listDetails" description="The list details that is to be sent as Messege ID and List IDs." />
   <sequence>
      <property name="uri.var.type" expression="$func:type" />
      <property name="uri.var.segmentId" expression="$func:segmentId" />
      <property name="uri.var.name" expression="$func:name" />
      <property name="uri.var.sdate" expression="$func:sdate" />
      <property name="uri.var.isStatusScheduled" expression="$func:isStatusScheduled" />
      <property name="uri.var.isPublic" expression="$func:isPublic" />
      <property name="uri.var.trackLinks" expression="$func:trackLinks" />
      <property name="uri.var.isTrackLinksAnalyticsEnabled" expression="$func:isTrackLinksAnalyticsEnabled" />
      <property name="uri.var.isTrackReadsEnabled" expression="$func:isTrackReadsEnabled" />
      <property name="uri.var.isTrackRepliesEnabled" expression="$func:isTrackRepliesEnabled" />
      <property name="uri.var.analyticsCampaignName" expression="$func:analyticsCampaignName" />
      <property name="uri.var.isTweetEnabled" expression="$func:isTweetEnabled" />
      <property name="uri.var.isFacebookEnabled" expression="$func:isFacebookEnabled" />
      <property name="uri.var.isHtmlUnsubEnabled" expression="$func:isHtmlUnsubEnabled" />
      <property name="uri.var.isTextUnsubEnabled" expression="$func:isTextUnsubEnabled" />
      <property name="uri.var.htmlUnsubData" expression="$func:htmlUnsubData" />
      <property name="uri.var.textUnsubData" expression="$func:textUnsubData" />
      <property name="uri.var.recurring" expression="$func:recurring" />
      <property name="uri.var.splitType" expression="$func:splitType" />
      <property name="uri.var.splitOffset" expression="$func:splitOffset" />
      <property name="uri.var.splitOffsetType" expression="$func:splitOffsetType" />
      <property name="uri.var.responderOffset" expression="$func:responderOffset" />
      <property name="uri.var.responderType" expression="$func:responderType" />
      <property name="uri.var.reminderField" expression="$func:reminderField" />
      <property name="uri.var.reminderFormat" expression="$func:reminderFormat" />
      <property name="uri.var.reminderType" expression="$func:reminderType" />
      <property name="uri.var.reminderOffset" expression="$func:reminderOffset" />
      <property name="uri.var.reminderOffsetType" expression="$func:reminderOffsetType" />
      <property name="uri.var.reminderOffsetSign" expression="$func:reminderOffsetSign" />
      <property name="uri.var.activerssInterval" expression="$func:activerssInterval" />
      <property name="uri.var.linkUrlList" expression="$func:linkUrlList" />
      <property name="uri.var.linkNameList" expression="$func:linkNameList" />
      <property name="uri.var.linkMessageList" expression="$func:linkMessageList" />
      <property name="uri.var.listDetails" expression="$func:listDetails" />
      <script language="js">
      <![CDATA[
          var type = mc.getProperty("uri.var.type");
          var segmentId = mc.getProperty("uri.var.segmentId");
          var name = mc.getProperty("uri.var.name");
          var sdate = mc.getProperty("uri.var.sdate");
          var isStatusScheduled = mc.getProperty("uri.var.isStatusScheduled");
          var isPublic = mc.getProperty("uri.var.isPublic");
          var trackLinks = mc.getProperty("uri.var.trackLinks");
          var isTrackLinksAnalyticsEnabled = mc.getProperty("uri.var.isTrackLinksAnalyticsEnabled");
          var isTrackReadsEnabled = mc.getProperty("uri.var.isTrackReadsEnabled");
          var isTrackRepliesEnabled = mc.getProperty("uri.var.isTrackRepliesEnabled");
          var analyticsCampaignName = mc.getProperty("uri.var.analyticsCampaignName");
          var isTweetEnabled = mc.getProperty("uri.var.isTweetEnabled");
          var isFacebookEnabled = mc.getProperty("uri.var.isFacebookEnabled");
          var isHtmlUnsubEnabled = mc.getProperty("uri.var.isHtmlUnsubEnabled");
          var isTextUnsubEnabled = mc.getProperty("uri.var.isTextUnsubEnabled");
          var htmlUnsubData = mc.getProperty("uri.var.htmlUnsubData");
          var textUnsubData = mc.getProperty("uri.var.textUnsubData");
          var recurring = mc.getProperty("uri.var.recurring");
          var splitType = mc.getProperty("uri.var.splitType");
          var splitOffset = mc.getProperty("uri.var.splitOffset");
          var splitOffsetType = mc.getProperty("uri.var.splitOffsetType");
          var responderOffset = mc.getProperty("uri.var.responderOffset");
          var responderType = mc.getProperty("uri.var.responderType");
          var reminderField = mc.getProperty("uri.var.reminderField");
          var reminderFormat = mc.getProperty("uri.var.reminderFormat");
          var reminderType = mc.getProperty("uri.var.reminderType");
          var reminderOffset = mc.getProperty("uri.var.reminderOffset");
          var reminderOffsetType = mc.getProperty("uri.var.reminderOffsetType");
          var reminderOffsetSign = mc.getProperty("uri.var.reminderOffsetSign");
          var activerssInterval = mc.getProperty("uri.var.activerssInterval");
          var linkUrlList = mc.getProperty("uri.var.linkUrlList");
          var linkNameList = mc.getProperty("uri.var.linkNameList");
          var linkMessageList = mc.getProperty("uri.var.linkMessageList");
          var listDetails = mc.getProperty("uri.var.listDetails");
          /*
            Since some parameter keys are not supported through JSON path,
            Need to set them directly to the payload. e.g. p[1],p[2]         
          */
          var payload = new Object();
          if(listDetails != null && listDetails != ""){
             payload = eval('(' + listDetails + ')');
          }
          payload.type = type; 
          payload.name = name; 
          payload.sdate = sdate; 
          payload.status = isStatusScheduled; 
          payload ["public"] = isPublic; 
          payload.tracklinks = trackLinks; 
          if(segmentId != null && segmentId != ""){
            payload.segmentid = segmentId;           
          }
          if(isTrackReadsEnabled != null && isTrackReadsEnabled != ""){
            payload.trackreads = isTrackReadsEnabled;           
          }
          if(isTrackLinksAnalyticsEnabled != null && isTrackLinksAnalyticsEnabled != ""){
            payload.tracklinksanalytics = isTrackLinksAnalyticsEnabled;           
          }
          if(isTrackRepliesEnabled != null && isTrackRepliesEnabled != ""){
            payload.trackreplies = isTrackRepliesEnabled;           
          }
          if(analyticsCampaignName != null && analyticsCampaignName != ""){
            payload.analytics_campaign_name = analyticsCampaignName;           
          }
          if(isTweetEnabled != null && isTweetEnabled != ""){
            payload.tweet = isTweetEnabled;           
          }
          if(isFacebookEnabled != null && isFacebookEnabled != ""){
            payload.facebook = isFacebookEnabled;           
          }
          if(isHtmlUnsubEnabled != null && isHtmlUnsubEnabled != ""){
            payload.htmlunsub = isHtmlUnsubEnabled;           
          }
          if(isTextUnsubEnabled != null && isTextUnsubEnabled != ""){
            payload.textunsub = isTextUnsubEnabled;           
          }
          if(htmlUnsubData != null && htmlUnsubData != ""){
            payload.htmlunsubdata = htmlUnsubData;           
          }
          if(textUnsubData != null && textUnsubData != ""){
            payload.textunsubdata = textUnsubData;           
          }
          if(recurring != null && recurring != ""){
            payload.recurring = recurring;           
          }
          if(splitType != null && splitType != ""){
            payload.split_type = splitType;           
          }
          if(splitOffset != null && splitOffset != ""){
            payload.split_offset = splitOffset;           
          }
          if(splitOffsetType != null && splitOffsetType != ""){
            payload.split_offset_type = splitOffsetType;           
          }
          if(responderOffset != null && responderOffset != ""){
            payload.responder_offset = responderOffset;           
          }
          if(responderType != null && responderType != ""){
            payload.responder_type = responderType;           
          }
          if(reminderField != null && reminderField != ""){
            payload.reminder_field = reminderField;           
          }
          if(reminderFormat != null && reminderFormat != ""){
            payload.reminder_format = reminderFormat;           
          }
          if(reminderType != null && reminderType != ""){
            payload.reminder_type = reminderType;           
          }
          if(reminderOffset != null && reminderOffset != ""){
            payload.reminder_offset = reminderOffset;           
          }
          if(reminderOffsetType != null && reminderOffsetType != ""){
            payload.reminder_offset_type = reminderOffsetType;           
          }
          if(reminderOffsetSign != null && reminderOffsetSign != ""){
            payload.reminder_offset_sign = reminderOffsetSign;           
          }
          if(activerssInterval != null && activerssInterval != ""){
            payload.activerss_interval = activerssInterval;           
          }
          if(linkUrlList != null && linkUrlList != ""){
            payload.linkurl = eval('(' + linkUrlList + ')');           
          }
          if(linkNameList != null && linkNameList != ""){
            payload.linkname = eval('(' + linkNameList + ')');           
          }
          if(linkMessageList != null && linkMessageList != ""){
            payload.linkmessage = eval('(' + linkMessageList + ')');           
          }
          mc.setPayloadJSON(payload);    
      ]]>
      </script>
      <property name="DISABLE_CHUNKING" value="true" scope="axis2" />
      <property name="messageType" value="application/x-www-form-urlencoded" scope="axis2" />
      <call>
         <endpoint>
            <http method="post" uri-template="{uri.var.apiUrl}campaign_create{+uri.var.queryParams}" />
         </endpoint>
      </call>      
      <!-- Remove response custom header information -->
      <header name="X-Powered-By" scope="transport" action="remove" />
      <header name="Pragma" scope="transport" action="remove" />
      <header name="Cache-control" scope="transport" action="remove" />
   </sequence>
</template>