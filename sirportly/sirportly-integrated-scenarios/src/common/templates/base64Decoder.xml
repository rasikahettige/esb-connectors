<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied. See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<template name="base64Decoder" xmlns="http://ws.apache.org/ns/synapse">
   <parameter name="responseBinaryString" description="The binary string." />
   <sequence>
      <property name="uri.var.responseBinaryString" expression="$func:responseBinaryString" />
      <!--If in case the error response returns as html then retrieve the error message accordingly. -->
      <filter source="boolean(get-property('uri.var.responseBinaryString'))" regex="true">
         <then>
            <!--This script will decode the base64 string -->
            <script language="js">
                        <![CDATA[
                                                   function base64_decode(data) {
                                                   var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
                                                   var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, dec = '', tmp_arr = [];
                                                   if (data.trim().length == 0) {
                                                   return data;
                                                   } else {
                                                   data += '';
                                                   }               
                                                   do {
                                                   // unpack four hexets into three octets using index points in b64
                                                   h1 = b64.indexOf(data.charAt(i++));
                                                   h2 = b64.indexOf(data.charAt(i++));
                                                   h3 = b64.indexOf(data.charAt(i++));
                                                   h4 = b64.indexOf(data.charAt(i++));  
                                                   bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;  
                                                   o1 = bits >> 16 & 0xff;
                                                   o2 = bits >> 8 & 0xff;
                                                   o3 = bits & 0xff;  
                                                   if (h3 == 64) {
                                                                tmp_arr[ac++] = String.fromCharCode(o1);
                                                   } else if (h4 == 64) {
                                                                tmp_arr[ac++] = String.fromCharCode(o1, o2);
                                                   } else {
                                                                tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);
                                                   }
                                                   } while (i < data.length);  
                                                   dec = tmp_arr.join(''); 
                                                   return dec.replace(/\0+$/, '');
                                                }            
                                                 var binaryString = mc.getProperty('uri.var.responseBinaryString');            
                                                 if(binaryString != null && binaryString != ""){
                                                   var responseHtml = base64_decode(binaryString);
                                                   
                                                   //there is an additional line break comes along with the html text which will make our json object invalid, so simply remove it from here itself
                                                   mc.setProperty('decodedResult',responseHtml.replace("\n",""));
                                                }         
                        ]]>
            </script>
         </then>
      </filter>
   </sequence>
</template>