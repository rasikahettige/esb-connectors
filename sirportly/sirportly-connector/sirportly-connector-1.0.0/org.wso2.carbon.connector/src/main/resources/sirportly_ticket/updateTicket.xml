<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied. See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<!-- API Doc: https://sirportly.com/docs/api-specification/tickets/changing-ticket-properties -->
<template name="updateTicket" xmlns="http://ws.apache.org/ns/synapse">
   <parameter name="ticketReference" description="The reference of the ticket to be updated." />
   <parameter name="status" description="The name or ID of the new status." />
   <parameter name="priority" description="The name or ID of the new priority." />
   <parameter name="departmentId" description="The ID of the new department." />
   <parameter name="sla" description="The name or ID of the new SLA." />
   <parameter name="team" description="The name or ID of the new team." />
   <parameter name="assignedUser" description="The username or ID of the user to be assigned." />
   <parameter name="subject" description="The subject of the ticket." />
   <parameter name="tagList" description="The space seperated list of tags for the ticket." />
   <parameter name="updatedAt" description="The date/time the ticket was updated." />
   <parameter name="replyDueAt" description="The date/time the ticket reply is due." />
   <parameter name="resolutionDueAt" description="The date/time the ticket resolution is due." />
   <parameter name="contactMethod" description="The ID of the contact method to be assigned." />
   <parameter name="contactMethodData" description="The The email address or telephone number of the contact method." />
   <parameter name="contactName" description="The The name of the contact." />
   <parameter name="additionalContactMethods" description="The comma seperated additional contact methods list." />
   <parameter name="customFields" description="The JSON object containing custom field values." />
   <sequence>
      <property name="uri.var.ticketReference" expression="$func:ticketReference" />
      <property name="uri.var.subject" expression="$func:subject" />
      <property name="uri.var.status" expression="$func:status" />
      <property name="uri.var.priority" expression="$func:priority" />
      <property name="uri.var.departmentId" expression="$func:departmentId" />
      <property name="uri.var.sla" expression="$func:sla" />
      <property name="uri.var.team" expression="$func:team" />
      <property name="uri.var.assignedUser" expression="$func:assignedUser" />
      <property name="uri.var.tagList" expression="$func:tagList" />
      <property name="uri.var.updatedAt" expression="$func:updatedAt" />
      <property name="uri.var.replyDueAt" expression="$func:replyDueAt" />
      <property name="uri.var.resolutionDueAt" expression="$func:resolutionDueAt" />
      <property name="uri.var.contactMethod" expression="$func:contactMethod" />
      <property name="uri.var.contactMethodData" expression="$func:contactMethodData" />
      <property name="uri.var.contactName" expression="$func:contactName" />
      <property name="uri.var.additionalContactMethods" expression="$func:additionalContactMethods" />
      <property name="uri.var.customFields" expression="$func:customFields" />
      <script language="js">
         <![CDATA[
            var customFields = mc.getProperty('uri.var.customFields');
            var ticketReference = mc.getProperty('uri.var.ticketReference');
            var subject = mc.getProperty('uri.var.subject');
            var status = mc.getProperty('uri.var.status');
            var priority = mc.getProperty('uri.var.priority');
            var departmentId = mc.getProperty('uri.var.departmentId');
            var sla = mc.getProperty('uri.var.sla');
            var brand = mc.getProperty('uri.var.brand');
            var team = mc.getProperty('uri.var.team');
            var assignedUser = mc.getProperty('uri.var.assignedUser');
            var tagList = mc.getProperty('uri.var.tagList');
            var updatedAt = mc.getProperty('uri.var.updatedAt');
            var replyDueAt = mc.getProperty('uri.var.replyDueAt');
            var resolutionDueAt = mc.getProperty('uri.var.resolutionDueAt');
            var contactMethod = mc.getProperty('uri.var.contactMethod');
            var contactMethodData = mc.getProperty('uri.var.contactMethodData');
            var contactName = mc.getProperty('uri.var.contactName');
            var additionalContactMethods = mc.getProperty('uri.var.additionalContactMethods');
            var payload = mc.getPayloadJSON();            
            // Since the paramters contain multiple occurrences directly add to the payload
            if (customFields != null && customFields != "") {
               payload = eval("(" + customFields + ")");
            } else {
               payload = new Object();
            }
            // Set the mandatory parameters
            payload.ticket = ticketReference;
            // Set the optional parameters
            if (subject != null && subject != "") {
               payload.subject = subject;
            }
            if (status != null && status != "") {
               payload.status = status;
            }
            if (priority != null && priority != "") {
               payload.priority = priority;
            }
            if (departmentId != null && departmentId != "") {
               payload.department = departmentId;
            }
            if (sla != null && sla != "") {
               payload.sla = sla;
            }
            if (brand != null && brand != "") {
               payload.brand = brand;
            }
            if (team != null && team != "") {
               payload.team = team;
            }
            if (assignedUser != null && assignedUser != "") {
               payload.user = assignedUser;
            }
            if (tagList != null && tagList != "") {
               payload.tag_list = tagList;
            }
            if (updatedAt != null && updatedAt != "") {
               payload.updated_at = updatedAt;
            }
            if (replyDueAt != null && replyDueAt != "") {
               payload.reply_due_at = replyDueAt;
            }
            if (resolutionDueAt != null && resolutionDueAt != "") {
               payload.resolution_due_at = resolutionDueAt;
            }
            if (contactMethod != null && contactMethod != "") {
               payload.contact_method = contactMethod;
            }
            if (contactMethodData != null && contactMethodData != "") {
               payload.contact_method_data = contactMethodData;
            }
            if (contactName != null && contactName != "") {
               payload.contact_name = contactName;
            }
            if (additionalContactMethods != null && additionalContactMethods != "") {
               payload.additional_contact_methods = additionalContactMethods;
            }
            mc.setPayloadJSON(payload);
         ]]>
      </script>
      <property name="messageType" value="application/x-www-form-urlencoded" scope="axis2" />
      <call>
         <endpoint>
            <http method="post" uri-template="{+uri.var.apiUrl}/tickets/update" />
         </endpoint>
      </call>
      <!-- Remove unwanted headers -->
      <header name="X-Runtime" scope="transport" action="remove" />
      <header name="Status" scope="transport" action="remove" />
      <header name="ETag" scope="transport" action="remove" />
      <header name="X-Request-Id" scope="transport" action="remove" />
      <header name="Cache-Control" scope="transport" action="remove" />
   </sequence>
</template>